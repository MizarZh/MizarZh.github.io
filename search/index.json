[{"content":"mathjax/katex test: $$ abc+edf $$\npicture test:\n\r\n本来是想要留个纪念（转hugo了），但是一上来就出现了大问题：hugo的运作机制和hexo大为不同，是没有mathjax的插件的，需要自己手动添加代码。\n目测有两种方法：一是在theme中插入mathjax代码从而渲染，二是安装hugo默认markdown渲染引擎goldmark的mathjax插件，或者使用pandoc之类的支持mathjax的渲染引擎。\n因为第一种方法较简单就直接使用第一种。解决方法：在themes/some-theme/layouts/partials/footer/footer.html的\u0026lt;footer\u0026gt;中添加语句：\n{{ if .Params.mathjax}} \u0026lt;!-- 判断文件中是否设置mathjax: true --\u0026gt; \u0026lt;!-- 引入mathjax3 --\u0026gt; \u0026lt;script src=\u0026#34;https://polyfill.io/v3/polyfill.min.js?features=es6\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script id=\u0026#34;MathJax-script\u0026#34; async src=\u0026#34;https://cdn.jsdelivr.net/npm/mathjax@3.0.1/es5/tex-mml-chtml.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; {{ end }} 文件头开启mathjax：\ntitle: \u0026#34;balabala\u0026#34; ... mathjax: true ... ​\n不得不说，hugo和hexo的运转机制十分不同，hugo的速度快，自由度也高许多，期望以后会有更好的使用体验。\n","date":"2021-10-27T16:21:58+08:00","image":"https://example.com/p/2021/10/my-first-post-mathjax-problem/%E5%B0%81%E9%9D%A2%E6%B5%8B%E8%AF%95_hue219db1679193659d52ea91d8c32cf29_372450_120x120_fill_q75_box_smart1.jpg","permalink":"https://example.com/p/2021/10/my-first-post-mathjax-problem/","title":"My First Post \u0026 Mathjax Problem"},{"content":"第四章 4.1  基本类型值指的是简单的数据段，而引用类型值指那些可能由多个值构成的对象。\n 五种基本数据类型：Undifined,Null,Boolean,Number,String，按值访问。 引用类型值（Object？）\njs不允许直接访问内存\n4.1.1 属性 对于引用类型的值，我们可以为其添加属性和方法，也可以改变和删除其属性和方法。 不能给基本类型值添加属性。\n4.1.2 复制 基本类型值\u0026quot;=\u0026ldquo;将进行值的复制，两个值之间不相关 而引用类型值的\u0026rdquo;=\u0026ldquo;将指向同一个对象\n4.1.3 传递参数  ECMAScript 中所有函数的参数都是按值传递的。 把函数外部的值复制给函数内部的参数，就和把值从一个变量复制到另一个变量一样。 在向参数传递基本类型的值时，被传递的值会被复制给一个局部变量（即命名参数，或者用ECMAScript的概念来说，就是 arguments 对象中的一个元素）。 在向参数传递引用类型的值时，会把这个值在内存中的地址复制给一个局部变量，因此这个局部变量的变化会反映在函数的外部。 可以把 ECMAScript函数的参数想象成局部变量。\n my comprehension:不管什么值进入函数都会复制一遍，并在函数内部赋值到一个临时变量上。 基本类型值基本没问题，但引用类型值的引用也被复制了，当在内部改变临时变量的属性时，随着引用外部的对象也会随着改变。\n4.1.4 检测类型 typeof方法和instanceof方法\n4.2 执行环境及作用域  执行环境（execution context，为简单起见，有时也称为“环境”）是JavaScript中最为重要的一个概念。执行环境定义了变量或函数有权访问的其他数据，决定了它们各自的行为。每个执行环境都有一个与之关联的变量对象（variable object），环境中定义的所有变量和函数都保存在这个对象中。虽然我们编写的代码无法访问这个对象，但解析器在处理数据时会在后台使用它。 全局变量与每个函数的执行环境 每个函数都有自己的执行环境。当执行流进入一个函数时，函数的环境就会被推入一个环境栈中。而在函数执行之后，栈将其环境弹出，把控制权返回给之前的执行环境。 当代码在一个环境中执行时，会创建变量对象的一个作用域链（scope chain）。作用域链的用途，是保证对执行环境有权访问的所有变量和函数的有序访问。作用域链的前端，始终都是当前执行的代码所在环境的变量对象。如果这个环境是函数，则将其活动对象（activation object）作为变量对象。\n 4.2.1 延长作用域链 try-catch语句的catch块： with语句：不解释\n4.2.2 没有块级作用域  变量 sum 在被初始化赋值时没有使用 var 关键字。于是，当调用完add()之后，添加到全局环境中的变量 sum 将继续存在；即使函数已经执行完毕，后面的代码依旧可以访问它。 不声明而直接初始化变量是一个常见的错误做法，因为这样可能会导致意外。我们建议在初始化变量之前，一定要先声明，这样就可以避免类似问题。在严格模式下，初始化未经声明的变量会导致错误。\n  当在某个环境中为了读取或写入而引用一个标识符时，必须通过搜索来确定该标识符实际代表什么。搜索过程从作用域链的前端开始，向上逐级查询与给定名字匹配的标识符。如果在局部环境中找到了该标识符，搜索过程停止，变量就绪。如果在局部环境中没有找到该变量名，则继续沿作用域链向上搜索。搜索过程将一直追溯到全局环境的变量对象。如果在全局环境中也没有找到这个标识符，则意味着该变量尚未声明。\n 4.3 垃圾收集 自动垃圾手机机制\n4.3.1 标记清除 变量进入环境时，将变量标记为“进入环境”。离开时标记为“离开环境”。\n4.3.2 引用清除 用得不多。跟踪记录每个值使用的次数。 问题：循环引用。 需手动切断链接。（设置引用为null）\n4.3.3 性能问题 注意性能相关问题。\n4.3.4 管理内存 不需要时手动解除引用。\n","date":"2020-02-05T00:35:24+08:00","permalink":"https://example.com/p/2020/02/js%E9%AB%98%E7%BA%A7%E8%AE%BE%E8%AE%A1%E7%AC%94%E8%AE%B0%E7%AC%AC%E5%9B%9B%E7%AB%A0/","title":"js高级设计笔记（第四章）"},{"content":"0、准备：   node.js官网下载node并安装\n  安装git for windows，以后将使用git bash作为命令行操4作 配置git账号信息：\ngit config --global user.name \u0026#34;Firstname Lastname\u0026#34; git config --global user.email \u0026#34;your-email@youremail.com\u0026#34;   github新建repository的地址需命名为your-github-name.github.io\n  1、使用cnpm npm命令在国内较慢，需要安装cnpm(淘宝镜像)\nnpm install -g cnpm --registry=https://registry.npm.taobao.org 2、安装hexo cnpm install -g hexo-cli 3、新建文件夹 新建一个文件夹，里面将存储blog所需文件\nmkdir my_blog cd my_blog 4、初始化hexo hexo init 5、安装hexo部署至github的工具 cnpm install --save hexo-deployer-git （若出现ERROR Deployer not found: git错误，则是这个工具未安装）\n6、其他配置 其中文件_config.yml是配置文件 部署到github上需要配置deploy部分\ntype: \u0026#39;git\u0026#39; 添加两行：\nrepo: _path-to-github-blog_ branch: master 可在theme中更换主题\n本地临时服务器： hexo s s 代表 start 默认地址为localhost:4000\n新建文档： hexo n \u0026#34;name\u0026#34; n 代表 new 文档存放在/source/_post/中\n生成文档： hexo g g 代表 generate 部署文档到github上：\nhexo d d 代表 deploy 第一次配置可能需要输入github的账号密码 若是git bash内提示账号相关的错误，返回第零步进行账号的配置\n","date":"2020-01-27T22:46:41+08:00","permalink":"https://example.com/p/2020/01/hexo-win10%E9%85%8D%E7%BD%AE%E6%96%B9%E6%B3%95%E5%B9%B6%E4%BD%BF%E7%94%A8github%E4%BD%9C%E4%B8%BA%E5%8D%9A%E5%AE%A2%E5%9C%B0%E5%9D%80/","title":"hexo win10配置方法，并使用github作为博客地址"}]