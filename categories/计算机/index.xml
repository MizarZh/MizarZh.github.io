<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>计算机 on MizarZ&#39;s Blog</title>
        <link>https://mizarzh.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/</link>
        <description>Recent content in 计算机 on MizarZ&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <lastBuildDate>Sat, 29 Oct 2022 00:58:11 +0800</lastBuildDate><atom:link href="https://mizarzh.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Github Token的配置方法</title>
        <link>https://mizarzh.github.io/p/2022/10/github-token%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%B9%E6%B3%95/</link>
        <pubDate>Sat, 29 Oct 2022 00:58:11 +0800</pubDate>
        
        <guid>https://mizarzh.github.io/p/2022/10/github-token%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%B9%E6%B3%95/</guid>
        <description>&lt;p&gt;虽然 github 关闭密码验证已经是很久之前的事情了：&lt;a class=&#34;link&#34; href=&#34;https://github.blog/changelog/2021-08-12-git-password-authentication-is-shutting-down/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Git password authentication is shutting down | GitHub Changelog&lt;/a&gt;，但是作为一个懒人，我在昨天才开始配置 token……&lt;/p&gt;
&lt;p&gt;简单记录一下更换 token 的步骤（因为确实很长，且分散在不同的文档中），以免以后忘记。&lt;/p&gt;
&lt;h2 id=&#34;1-添加-ssh-key&#34;&gt;1 添加 SSH key&lt;/h2&gt;
&lt;p&gt;生成 SSH key：&lt;a class=&#34;link&#34; href=&#34;https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Generating a new SSH key and adding it to the ssh-agent - GitHub Docs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;添加 SSH key 到账号中：&lt;a class=&#34;link&#34; href=&#34;https://docs.github.com/en/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Adding a new SSH key to your GitHub account - GitHub Docs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;简单来说就是在本地生成一个 SSH key（相当于凭证），然后保存在 github 自己的账号上，这样本机就可以通过这个凭证进行操作了。&lt;/p&gt;
&lt;p&gt;大概步骤：&lt;/p&gt;
&lt;p&gt;1、本地生成一个以自己邮箱为 label 的 SSH key：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ssh-keygen -t ed25519 -C &lt;span class=&#34;s2&#34;&gt;&amp;#34;your_email@example.com&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;2、输入储存的位置（回车则存储在默认位置）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;gt; Enter a file in which to save the key &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;/c/Users/YOU/.ssh/id_ALGORITHM&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;:&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;Press enter&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;输入 passphrase （相当于保护 SSH key 密码一样的东西），也可以不设置直接回车。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;gt; Enter passphrase &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;empty &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; no passphrase&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;: &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;Type a passphrase&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;gt; Enter same passphrase again: &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;Type passphrase again&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;3、查看生成的 SSH key&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cat ~/.ssh/id_ed25519.pub
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后复制&lt;/p&gt;
&lt;p&gt;4、Github 配置&lt;/p&gt;
&lt;p&gt;Settings -&amp;gt; Access / SSH and GPG keys -&amp;gt; new SSH key -&amp;gt; 起个名字，粘贴刚刚赋值的 key -&amp;gt; Add SSH key&lt;/p&gt;
&lt;h2 id=&#34;2-生成-token&#34;&gt;2 生成 token&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Creating a personal access token - GitHub Docs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;真正的凭证应该是 token，有了 token 才能在命令行中与 remote 服务器交流。&lt;/p&gt;
&lt;p&gt;一共有两种 token：classic 和 fine-grained 。最大区别在于 classic 只能应用到所有仓库上，fine-grained 可以更加细致的分配到什么仓库、什么权限上。&lt;/p&gt;
&lt;p&gt;配置位置：Settings -&amp;gt; Developer settings -&amp;gt; Personal access tokens&lt;/p&gt;
&lt;p&gt;配置详细见文档，应该也不是很难操作。&lt;/p&gt;
&lt;h2 id=&#34;3-remote-最速解决方法&#34;&gt;3 remote 最速解决方法&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://docs.github.com/en/get-started/getting-started-with-git/managing-remote-repositories&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Managing remote repositories - GitHub Docs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;git push, pull 等等应该是最常用的操作。带有 token 的 push 我倒是没在 github docs 上看到有相关的写法，导致一直在用修改前的 origin。&lt;/p&gt;
&lt;p&gt;现在不能直接 push 到 &lt;code&gt;https://github.com/name/repository.git&lt;/code&gt;，而是要在 &lt;code&gt;github.com&lt;/code&gt; 前面加上 &lt;code&gt;token@&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git push https://&amp;lt;GITHUB_ACCESS_TOKEN&amp;gt;@github.com/&amp;lt;GITHUB_USERNAME&amp;gt;/&amp;lt;REPOSITORY_NAME&amp;gt;.git
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;有可能需要修改一下以前的 remote 配置了：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git remote set-url origin https://&amp;lt;GITHUB_ACCESS_TOKEN&amp;gt;@github.com/&amp;lt;GITHUB_USERNAME&amp;gt;/&amp;lt;REPOSITORY_NAME&amp;gt;.git
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;一些相关的讨论：&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://stackoverflow.com/questions/18935539/authenticate-with-github-using-a-token&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Authenticate with GitHub using a token - Stack Overflow&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>HTTP头的一些知识点（Cache）</title>
        <link>https://mizarzh.github.io/p/2022/01/http%E5%A4%B4%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86%E7%82%B9cache/</link>
        <pubDate>Tue, 25 Jan 2022 20:25:37 +0800</pubDate>
        
        <guid>https://mizarzh.github.io/p/2022/01/http%E5%A4%B4%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86%E7%82%B9cache/</guid>
        <description>&lt;h1 id=&#34;缓存&#34;&gt;缓存&lt;/h1&gt;
&lt;h2 id=&#34;概述&#34;&gt;概述&lt;/h2&gt;
&lt;p&gt;整体概述见 &lt;a class=&#34;link&#34; href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Caching&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;MDN-Cache&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;缓存是一种保存资源副本并在下次请求时直接使用该副本的技术。当 web 缓存发现请求的资源已经被存储，它会拦截请求，返回该资源的拷贝，而不会去源服务器重新下载。&lt;/p&gt;
&lt;p&gt;缓存分两种：私有与共享缓存。共享缓存存储的响应能够被多个用户使用。私有缓存只能用于单独用户。&lt;/p&gt;
&lt;p&gt;通常缓存的内容是：GET 请求，永久重定向 301，错误响应 404，不完全的响应 206，一个被定义的 cache 键名的响应。&lt;/p&gt;
&lt;p&gt;判断是否过期的一些方法：&lt;/p&gt;
&lt;p&gt;1、约定时间&lt;/p&gt;
&lt;p&gt;2、在URL后面（通常是文件名后面）会加上版本号。&lt;/p&gt;
&lt;p&gt;3、缓存验证：当缓存的文档过期后，需要进行缓存验证或者重新获取资源。只有在服务器返回强校验器或者弱校验器时才会进行验证。&lt;/p&gt;
&lt;p&gt;Vary 请求头：当缓存服务器收到一个请求，只有当前的请求和原始（缓存）的请求头跟缓存的响应头里的Vary都匹配，才能使用缓存的响应。&lt;/p&gt;
&lt;h2 id=&#34;cache-control&#34;&gt;Cache-Control&lt;/h2&gt;
&lt;p&gt;文档来自 &lt;a class=&#34;link&#34; href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Cache-Control&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;MDN&lt;/a&gt;，规范链接 &lt;a class=&#34;link&#34; href=&#34;https://datatracker.ietf.org/doc/html/rfc7234&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;RFC7234&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;简介&#34;&gt;简介&lt;/h3&gt;
&lt;p&gt;通用消息头字段，被用于在http请求和响应中，通过指定指令来实现缓存机制。&lt;/p&gt;
&lt;p&gt;缓存指令是单向的，这意味着在请求中设置的指令，不一定被包含在响应中。&lt;/p&gt;
&lt;h3 id=&#34;指令&#34;&gt;指令&lt;/h3&gt;
&lt;p&gt;请求指令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-http&#34; data-lang=&#34;http&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;Cache-Control: max-age=&amp;lt;seconds&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;Cache-Control: max-stale[=&amp;lt;seconds&amp;gt;]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;Cache-Control: min-fresh=&amp;lt;seconds&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;Cache-control: no-cache
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;Cache-control: no-store
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;Cache-control: no-transform
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;Cache-control: only-if-cached
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;响应指令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-http&#34; data-lang=&#34;http&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;Cache-control: must-revalidate
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;Cache-control: no-cache
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;Cache-control: no-store
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;Cache-control: no-transform
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;Cache-control: public
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;Cache-control: private
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;Cache-control: proxy-revalidate
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;Cache-Control: max-age=&amp;lt;seconds&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;Cache-control: s-maxage=&amp;lt;seconds&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;拓展指令（不是标准文档的一部分，注意兼容性）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-http&#34; data-lang=&#34;http&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;Cache-control: immutable
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;Cache-control: stale-while-revalidate=&amp;lt;seconds&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;Cache-control: stale-if-error=&amp;lt;seconds&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;详细解释&#34;&gt;详细解释&lt;/h3&gt;
&lt;h4 id=&#34;可缓存性&#34;&gt;可缓存性&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;可以被任何对象缓存（包括发送请求的客户端，代理服务器，等等）。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;private&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;能被单个用户缓存，不能作为共享缓存（即代理服务器不能缓存它）。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;no-cache&lt;/code&gt;：验证缓存&lt;/p&gt;
&lt;p&gt;在发布缓存副本之前，强制要求缓存把请求提交给原始服务器进行验证(协商缓存验证)。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;no-store&lt;/code&gt;：不缓存&lt;/p&gt;
&lt;p&gt;不使用任何缓存。（这个才是真的）&lt;/p&gt;
&lt;h4 id=&#34;到期&#34;&gt;到期&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;max-age=&amp;lt;seconds&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;设置缓存存储的最大周期，超过这个时间缓存被认为过期(单位秒)。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;s-maxage=&amp;lt;seconds&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;覆盖&lt;code&gt;max-age&lt;/code&gt;或者&lt;code&gt;Expires&lt;/code&gt;头，但是仅适用于共享缓存(比如各个代理)，私有缓存会忽略它。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;max-stale[=&amp;lt;seconds&amp;gt;]&lt;/code&gt;：接受旧响应&lt;/p&gt;
&lt;p&gt;表明客户端愿意接收一个已经过期的资源。&lt;/p&gt;
&lt;p&gt;可以设置一个可选的秒数，表示响应不能已经过时超过该给定的时间。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;min-fresh=&amp;lt;seconds&amp;gt;&lt;/code&gt;：指定秒数内保持最新&lt;/p&gt;
&lt;p&gt;表示客户端希望获取一个能在指定的秒数内保持其最新状态的响应。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;stale-while-revalidate=&amp;lt;seconds&amp;gt;&lt;/code&gt; 实验：接受旧响应+验证&lt;/p&gt;
&lt;p&gt;表明客户端愿意接受陈旧的响应，同时在后台异步检查新的响应。&lt;/p&gt;
&lt;p&gt;秒值指示客户愿意接受陈旧响应的时间长度。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;stale-if-error=&amp;lt;seconds&amp;gt;&lt;/code&gt; 实验：检查失败接受旧响应&lt;/p&gt;
&lt;p&gt;表示如果新的检查失败，则客户愿意接受陈旧的响应。&lt;/p&gt;
&lt;p&gt;秒数值表示客户在初始到期后愿意接受陈旧响应的时间。&lt;/p&gt;
&lt;h4 id=&#34;重新验证和重新加载&#34;&gt;重新验证和重新加载&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;must-revalidate&lt;/code&gt;：过期不能使用&lt;/p&gt;
&lt;p&gt;一旦资源过期，在成功向原始服务器验证之前，缓存不能用该资源响应后续请求。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;proxy-revalidate&lt;/code&gt;：过期不能使用 proxy 版&lt;/p&gt;
&lt;p&gt;与 &lt;code&gt;must-revalidate&lt;/code&gt; 作用相同，但它仅适用于共享缓存（例如代理），并被私有缓存忽略。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;immutable&lt;/code&gt; 实验&lt;/p&gt;
&lt;p&gt;表示响应正文不会随时间而改变。资源（如果未过期）在服务器上不发生改变，因此客户端不应发送重新验证请求头（例如&lt;code&gt;If-None-Match&lt;/code&gt;或I&lt;code&gt;f-Modified-Since&lt;/code&gt;）来检查更新，即使用户显式地刷新页面。&lt;/p&gt;
&lt;h4 id=&#34;其他&#34;&gt;其他&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;no-transform&lt;/code&gt;：不能变&lt;/p&gt;
&lt;p&gt;不得对资源进行转换或转变。&lt;code&gt;Content-Encoding&lt;/code&gt;、&lt;code&gt;Content-Range&lt;/code&gt;、&lt;code&gt;Content-Type&lt;/code&gt;等HTTP头不能由代理修改。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;only-if-cached&lt;/code&gt;：只接受缓存&lt;/p&gt;
&lt;p&gt;表明客户端只接受已缓存的响应，并且不要向原始服务器检查是否有更新的拷贝。&lt;/p&gt;
&lt;h3 id=&#34;一些常用的技巧&#34;&gt;一些常用的技巧&lt;/h3&gt;
&lt;p&gt;设置 &lt;code&gt;no-cache&lt;/code&gt; 或 &lt;code&gt;max-age=0, must-revalidate&lt;/code&gt; 表示客户端可以缓存资源，每次使用缓存资源前都必须重新验证其有效性。&lt;/p&gt;
&lt;h2 id=&#34;expires&#34;&gt;Expires&lt;/h2&gt;
&lt;p&gt;包含日期/时间， 即在此时候之后，响应过期。如果设置无效的日期，比如 0, 代表着过去的日期，即该资源已经过期。&lt;/p&gt;
&lt;p&gt;如果在 &lt;code&gt;Cache-Control &lt;/code&gt;响应头设置了 &amp;ldquo;max-age&amp;rdquo; 或者 &amp;ldquo;s-max-age&amp;rdquo; 指令，那么 &lt;code&gt;Expires&lt;/code&gt; 头会被忽略。&lt;/p&gt;
&lt;p&gt;和 max-age 区别：max-age 指定的是时间长度，Expires 指定的是日期&lt;/p&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-http&#34; data-lang=&#34;http&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;Expires: &amp;lt;http-date&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;例子：
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;Expires: Wed, 21 Oct 2015 07:28:00 GMT
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;pragma&#34;&gt;Pragma&lt;/h2&gt;
&lt;p&gt;是一个在 HTTP/1.0 中规定的通用首部，这个首部的效果依赖于不同的实现，所以在“请求-响应”链中可能会有不同的效果。它用来向后兼容只支持 HTTP/1.0 协议的缓存服务器，那时候 HTTP/1.1 协议中的 Cache-Control 还没有出来。（兼容用）&lt;/p&gt;
&lt;h2 id=&#34;etag&#34;&gt;ETag&lt;/h2&gt;
&lt;p&gt;是资源的特定版本的标识符。&lt;/p&gt;
&lt;p&gt;如果内容发生了变化，使用ETag有助于防止资源的同时更新相互覆盖（“空中碰撞”）。如果给定URL中的资源更改，则一定要生成新的Etag值。&lt;/p&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-http&#34; data-lang=&#34;http&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;ETag: W/&amp;#34;&amp;lt;etag_value&amp;gt;&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;ETag: &amp;#34;&amp;lt;etag_value&amp;gt;&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;例子
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;ETag: W/&amp;#34;0815&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;ETag: &amp;#34;33a64df551425fcc55e4d42a148795d9f25f89d4&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;W/&lt;/code&gt; 可选&lt;/p&gt;
&lt;p&gt;表示使用弱验证器。弱验证器很容易生成，但不利于比较。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;quot;&amp;lt;etag_value&amp;gt;&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;实体标签唯一地表示所请求的资源。 它们是位于双引号之间的ASCII字符串（如“675af34563dc-tr34”）。 没有明确指定生成ETag值的方法。 通常，使用内容的散列，最后修改时间戳的哈希值，或简单地使用版本号。&lt;/p&gt;
&lt;p&gt;与 &lt;code&gt;If-Match&lt;/code&gt; 和 &lt;code&gt;If-None_Match&lt;/code&gt; 头部匹配。表示的是是否匹配/是否不匹配。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;If-Match&lt;/code&gt;  代表不相同代表不是最新。&lt;/p&gt;
&lt;p&gt;如果客户端没有 &lt;code&gt;ETag&lt;/code&gt;，显示过期了，客服端旧发送&lt;code&gt;If-None_Match&lt;/code&gt; 。如果匹配就说明 304（未修改）。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-http&#34; data-lang=&#34;http&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;If-Match: &amp;#34;33a64df551425fcc55e4d42a148795d9f25f89d4&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;If-None-Match: &amp;#34;33a64df551425fcc55e4d42a148795d9f25f89d4&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;vary&#34;&gt;Vary&lt;/h2&gt;
&lt;p&gt;它决定了对于未来的一个请求头，应该用一个缓存的回复(response)还是向源服务器请求一个新的回复。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-http&#34; data-lang=&#34;http&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;Vary: *
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;Vary: &amp;lt;header-name&amp;gt;, &amp;lt;header-name&amp;gt;, ...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;*&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;所有的请求都被视为唯一并且非缓存的，使&lt;code&gt;Cache-Control: no-store&lt;/code&gt;来实现则更适用，这样用于说明不存储该对象更加清晰。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;header-name&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;逗号分隔的一系列http头部名称，用于确定缓存是否可用。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-http&#34; data-lang=&#34;http&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;Vary: User-Agent
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这句话是对 UA 头部信息进行判别的。提供给移动端的内容是不同的，可用防止你客户端误使用了用于桌面端的缓存。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>HTTP头的一些知识点（CORS、CSP）</title>
        <link>https://mizarzh.github.io/p/2022/01/http%E5%A4%B4%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86%E7%82%B9corscsp/</link>
        <pubDate>Tue, 25 Jan 2022 20:25:37 +0800</pubDate>
        
        <guid>https://mizarzh.github.io/p/2022/01/http%E5%A4%B4%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86%E7%82%B9corscsp/</guid>
        <description>&lt;h1 id=&#34;跨域问题&#34;&gt;跨域问题&lt;/h1&gt;
&lt;p&gt;整体概述见 &lt;a class=&#34;link&#34; href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;MDN-CORS&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;一个重要的概念是跨源资源共享（CORS），意为除了本服务器以外的其他来源（origin）访问自己的资源。首部字段 &lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt; 用来控制什么域可以访问。&lt;/p&gt;
&lt;p&gt;有时候我们需要检查 CORS 请求是否是真实的。跨源资源共享还通过一种机制来检查服务器是否会允许要发送的真实请求，该机制通过浏览器发起一个到服务器托管的跨源资源的&amp;quot;预检&amp;quot;请求。首部字段如 &lt;code&gt;Access-Control-Max-Age, Access-Control-Allow-Credentials, Access-Control-Allow-Methods, Access-Control-Allow-Headers&lt;/code&gt; 是用于预检请求的。&lt;/p&gt;
&lt;p&gt;对那些可能对服务器数据产生副作用的 HTTP 请求方法，浏览器必须首先使用 &lt;code&gt;OPTIONS&lt;/code&gt; 方法发起一个预检请求（preflight request），从而获知服务端是否允许该跨源请求。服务器确认允许之后，才发起实际的 HTTP 请求。在预检请求的返回中，服务器端也可以通知客户端，是否需要携带身份凭证。身份凭证通常为 &lt;code&gt;Cookie&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;满足所有下述条件&lt;/strong&gt;不会触发 CORS 预检请求：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;1、使用下列方法之一：

    GET
    HEAD
    POST

2、除了被用户代理自动设置的首部字段（例如 Connection，User-Agent）和在 Fetch 规范中定义为 禁用首部名称 的其他首部，允许人为设置的字段为 Fetch 规范定义的 对 CORS 安全的首部字段集合。该集合为：

    Accept
    Accept-Language
    Content-Language
    Content-Type （需要注意额外的限制）

3、Content-Type 的值仅限于下列三者之一：

    text/plain
    multipart/form-data
    application/x-www-form-urlencoded

4、请求中的任意 XMLHttpRequest 对象均没有注册任何事件监听器；XMLHttpRequest 对象可以使用 XMLHttpRequest.upload 属性访问。

5、请求中没有使用 ReadableStream 对象。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;预检请求的过程（以下省略 &lt;code&gt;Access-Control&lt;/code&gt;，因为太长了）：&lt;/p&gt;
&lt;p&gt;OPTIONS 发起（携带 &lt;code&gt;Request-Method&lt;/code&gt; 和 &lt;code&gt;Request-Headers&lt;/code&gt;） -&amp;gt;&lt;/p&gt;
&lt;p&gt;[验证 &lt;code&gt;Allow-Credentials: true&lt;/code&gt; + 身份凭证（通常为 Cookie）-&amp;gt;  ]&lt;/p&gt;
&lt;p&gt;返回 &lt;code&gt;Max-Age&lt;/code&gt; 头表示允许的最长时间， &lt;code&gt;Allow-Methods&lt;/code&gt; 表示允许操作的方法，&lt;code&gt;Allow-Headers&lt;/code&gt; 表示允许的首部字段。或者返回 CORS 错误。&lt;/p&gt;
&lt;h2 id=&#34;响应&#34;&gt;响应&lt;/h2&gt;
&lt;h3 id=&#34;access-control-allow-origin&#34;&gt;Access-Control-Allow-Origin&lt;/h3&gt;
&lt;p&gt;指定了该响应的资源是否被允许与给定的 origin 共享。&lt;/p&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-http&#34; data-lang=&#34;http&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;Access-Control-Allow-Origin: *
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;Access-Control-Allow-Origin: &amp;lt;origin&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;*&lt;/code&gt;：不需要凭证。（即允许所有网站都能访问）&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;origin&amp;gt;&lt;/code&gt;：指定一个可以访问资源的 URI。（指定某些网站能访问）&lt;/p&gt;
&lt;p&gt;为了对不同的域有不同的缓存，我们可以加上 &lt;code&gt;Vary: Origin&lt;/code&gt; 的头。&lt;/p&gt;
&lt;h3 id=&#34;access-control-expose-headers&#34;&gt;Access-Control-Expose-Headers&lt;/h3&gt;
&lt;p&gt;列出了哪些首部可以作为响应的一部分暴露给外部。&lt;/p&gt;
&lt;p&gt;通常有七种简单响应首部：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Cache-Control
Content-Language
Content-Length
Content-Type
Expires
Last-Modified
Pragma
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;设定 &lt;code&gt;Access-Control-Expose-Headers &lt;/code&gt; 可以暴露其中的一部分。&lt;/p&gt;
&lt;h3 id=&#34;access-control-max-age&#34;&gt;Access-Control-Max-Age&lt;/h3&gt;
&lt;p&gt;表示预检请求的返回结果可以被缓存多久（即&lt;code&gt;Access-Control-Allow-Methods, Access-Control-Allow-Headers&lt;/code&gt;）。&lt;/p&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-http&#34; data-lang=&#34;http&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;Access-Control-Max-Age: &amp;lt;delta-seconds&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;浏览器一般有限制的最大值。&lt;/p&gt;
&lt;p&gt;如果值为 &lt;strong&gt;-1&lt;/strong&gt;，表示禁用缓存，则每次请求前都需要使用 OPTIONS 预检请求。&lt;/p&gt;
&lt;h3 id=&#34;access-control-allow-credentials&#34;&gt;Access-Control-Allow-Credentials&lt;/h3&gt;
&lt;p&gt;表示是否可以将对请求的响应暴露给页面。返回true则可以，其他值均不可以。&lt;/p&gt;
&lt;p&gt;Credentials可以是 cookies, authorization headers 或 TLS client certificates。&lt;/p&gt;
&lt;p&gt;与 &lt;code&gt;XMLHttpRequest.withCredentials&lt;/code&gt; 或Fetch API中的 &lt;code&gt;Request()&lt;/code&gt; 构造器中的 credentials 选项结合使用。&lt;/p&gt;
&lt;h3 id=&#34;access-control-allow-methods&#34;&gt;Access-Control-Allow-Methods&lt;/h3&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-http&#34; data-lang=&#34;http&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;Access-Control-Allow-Methods: &amp;lt;method&amp;gt;, &amp;lt;method&amp;gt;, ...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;access-control-allow-headers&#34;&gt;Access-Control-Allow-Headers&lt;/h3&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-http&#34; data-lang=&#34;http&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;Access-Control-Allow-Headers: &amp;lt;field-name&amp;gt;[, &amp;lt;field-name&amp;gt;]*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;Access-Control-Allow-Headers: *
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;请求&#34;&gt;请求&lt;/h2&gt;
&lt;h3 id=&#34;origin&#34;&gt;Origin&lt;/h3&gt;
&lt;p&gt;请求首部字段 &lt;code&gt;Origin&lt;/code&gt; 指示了请求来自于哪个站点。该字段仅指示服务器名称，并不包含任何路径信息。&lt;/p&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-http&#34; data-lang=&#34;http&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;Origin: &amp;#34;&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;Origin: &amp;lt;scheme&amp;gt; &amp;#34;://&amp;#34; &amp;lt;host&amp;gt; [ &amp;#34;:&amp;#34; &amp;lt;port&amp;gt; ]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;access-control-request-method&#34;&gt;Access-Control-Request-Method&lt;/h3&gt;
&lt;p&gt;用于预检请求。其作用是，将实际请求所使用的 HTTP 方法告诉服务器。&lt;/p&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-http&#34; data-lang=&#34;http&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;Access-Control-Allow-Methods: &amp;lt;method&amp;gt;, &amp;lt;method&amp;gt;, ...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;access-control-request-headers&#34;&gt;Access-Control-Request-Headers&lt;/h3&gt;
&lt;p&gt;用于预检请求。其作用是，将实际请求所携带的首部字段告诉服务器。&lt;/p&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-http&#34; data-lang=&#34;http&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;Access-Control-Allow-Headers: &amp;lt;header-name&amp;gt;[, &amp;lt;header-name&amp;gt;]*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;Access-Control-Allow-Headers: *
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;跨域策略&#34;&gt;跨域策略&lt;/h1&gt;
&lt;p&gt;详细资料见 &lt;a class=&#34;link&#34; href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTTP/Cross-Origin_Resource_Policy_%28CORP%29&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;MDN-CORP &lt;/a&gt;和 &lt;a class=&#34;link&#34; href=&#34;https://web.dev/why-coop-coep/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;为何需要“跨源隔离”才能获得强大的功能&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;简介-1&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;CORS 出现后，确实能加载跨域资源了，但是基于 CORS 网络攻击也随之而来。如 Spectre，跨域脚本注入攻击等。因此需要引入另外的策略以确保安全。&lt;/p&gt;
&lt;p&gt;CORP 是默认同源策略上的一层保护。&lt;/p&gt;
&lt;h2 id=&#34;cross-origin-resource-policy-corp&#34;&gt;Cross-Origin-Resource-Policy (CORP)&lt;/h2&gt;
&lt;p&gt;会指示浏览器阻止对指定资源的无源跨域/跨站点请求。&lt;/p&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-http&#34; data-lang=&#34;http&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;Cross-Origin-Resource-Policy: same-site | same-origin | cross-origin
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;cross-origin-opener-policy-coop&#34;&gt;Cross-Origin-Opener-Policy (COOP)&lt;/h2&gt;
&lt;p&gt;允许通过将其他文档放在不同的浏览器上下文组中，确保将其与其他文档隔离开，这样它们就不能直接与顶层窗口进行交互。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-http&#34; data-lang=&#34;http&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;Cross-Origin-Opener-Policy: unsafe-none | same-origin-allow-popups | same-origin
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;unsafe-none&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;​    默认值，允许设置浏览器上下文组，除非 opener 本身的 COOP 为 &lt;code&gt;same-origin&lt;/code&gt; 或 &lt;code&gt;same-origin-allow-popups&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;same-origin-allow-popups&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;​    带有 &lt;code&gt;same-origin-allow-popups&lt;/code&gt; 的顶级文档保留了对未设置 COOP 或通过把 COOP 设置为 &lt;code&gt;unsafe-none&lt;/code&gt; 而选择退出隔离的任何弹出窗口的引用。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://mizarzh.github.io/p/2022/01/http%E5%A4%B4%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86%E7%82%B9corscsp/coop3.png&#34;
	width=&#34;800&#34;
	height=&#34;537&#34;
	srcset=&#34;https://mizarzh.github.io/p/2022/01/http%E5%A4%B4%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86%E7%82%B9corscsp/coop3_hu768711903f085caee47ac7be37afed2b_21514_480x0_resize_box_3.png 480w, https://mizarzh.github.io/p/2022/01/http%E5%A4%B4%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86%E7%82%B9corscsp/coop3_hu768711903f085caee47ac7be37afed2b_21514_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;COOP&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;148&#34;
		data-flex-basis=&#34;357px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;same-origin&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;​    标有 &lt;code&gt;same-origin&lt;/code&gt; 的文档可以与标有 &lt;code&gt;same-origin&lt;/code&gt; 的同源文件共享相同的浏览上下文组。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://mizarzh.github.io/p/2022/01/http%E5%A4%B4%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86%E7%82%B9corscsp/coop2.png&#34;
	width=&#34;800&#34;
	height=&#34;507&#34;
	srcset=&#34;https://mizarzh.github.io/p/2022/01/http%E5%A4%B4%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86%E7%82%B9corscsp/coop2_huf2e1fa64086281a1c8bedc1c47a49ca2_24491_480x0_resize_box_3.png 480w, https://mizarzh.github.io/p/2022/01/http%E5%A4%B4%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86%E7%82%B9corscsp/coop2_huf2e1fa64086281a1c8bedc1c47a49ca2_24491_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;COOP2&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;157&#34;
		data-flex-basis=&#34;378px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;cross-origin-embedder-policy-coep&#34;&gt;Cross-Origin-Embedder-Policy (COEP)&lt;/h2&gt;
&lt;p&gt;可防止文档加载未明确授予文档权限(通过 CORP 或者 CORS)的任何跨域资源 。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://mizarzh.github.io/p/2022/01/http%E5%A4%B4%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86%E7%82%B9corscsp/coep.png&#34;
	width=&#34;800&#34;
	height=&#34;410&#34;
	srcset=&#34;https://mizarzh.github.io/p/2022/01/http%E5%A4%B4%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86%E7%82%B9corscsp/coep_huc0ac7001fa60d37fe55a5bb05ff9b1bc_21404_480x0_resize_box_3.png 480w, https://mizarzh.github.io/p/2022/01/http%E5%A4%B4%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86%E7%82%B9corscsp/coep_huc0ac7001fa60d37fe55a5bb05ff9b1bc_21404_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;COEP 的工作原理&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;195&#34;
		data-flex-basis=&#34;468px&#34;
	
&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-http&#34; data-lang=&#34;http&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;Cross-Origin-Embedder-Policy: unsafe-none | require-corp
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;unsafe-none&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这是默认值. 允许文档获取跨源资源，而无需通过CORS协议或 &lt;code&gt;Cross-Origin-Resource-Policy&lt;/code&gt;头。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;require-corp&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;文档只能从相同的源加载资源，或显式标记为可从另一个源加载的资源。&lt;/p&gt;
&lt;p&gt;如果跨源资源支持CORS，则 &lt;code&gt;crossorigin&lt;/code&gt; 属性或 &lt;code&gt;Cross-Origin-Resource-Policy&lt;/code&gt;头必须使用它来加载资源，而不会被COEP阻止。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;内容安全策略csp&#34;&gt;内容安全策略（CSP）&lt;/h1&gt;
&lt;p&gt;详细介绍见 &lt;a class=&#34;link&#34; href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CSP&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;MDN-CSP&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;是一个额外的安全层，用于检测并削弱某些特定类型的攻击，包括跨站脚本 (XSS) 和数据注入攻击等。&lt;/p&gt;
&lt;h2 id=&#34;content-security-policy&#34;&gt;Content-Security-Policy&lt;/h2&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-http&#34; data-lang=&#34;http&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;Content-Security-Policy: &amp;lt;policy-directive&amp;gt;; &amp;lt;policy-directive&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;格式：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-http&#34; data-lang=&#34;http&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;Content-Security-Policy: default-src &amp;#39;self&amp;#39;; img-src *; media-src media1.com media2.com;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;&#39;self&#39;&lt;/code&gt; 指的是站点的同一个源。&lt;/p&gt;
&lt;p&gt;通常使用的获取指令（fetch directives）：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;child-src&lt;/code&gt;
为 web workers 和其他内嵌浏览器内容（例如用 &lt;code&gt;&amp;lt;frame&amp;gt;&lt;/code&gt; 和 &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; 加载到页面的内容）定义合法的源地址。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;connect-src&lt;/code&gt;
限制能通过脚本接口加载的URL。
&lt;code&gt;default-src&lt;/code&gt;
为其他取指令提供备用服务fetch directives。
&lt;code&gt;font-src&lt;/code&gt;
font-src：设置允许通过@font-face加载的字体源地址。
&lt;code&gt;frame-src&lt;/code&gt;
设置允许通过类似 &lt;code&gt;&amp;lt;frame&amp;gt;&lt;/code&gt; 和 &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; 标签加载的内嵌内容的源地址。
&lt;code&gt;img-src&lt;/code&gt;
限制图片和图标的源地址
&lt;code&gt;manifest-src&lt;/code&gt;
限制应用声明文件的源地址。
&lt;code&gt;media-src&lt;/code&gt;
限制通过 &lt;code&gt;&amp;lt;audio&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; 或 &lt;code&gt;&amp;lt;track&amp;gt;&lt;/code&gt; 标签加载的媒体文件的源地址。
&lt;code&gt;object-src&lt;/code&gt;
限制 &lt;code&gt;&amp;lt;object&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;embed&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;applet&amp;gt;&lt;/code&gt; 标签的源地址。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;prefetch-src&lt;/code&gt;
指定预加载或预渲染的允许源地址。
&lt;code&gt;script-src&lt;/code&gt;
限制 JavaScript 的源地址。
&lt;code&gt;style-src&lt;/code&gt;
限制层叠样式表文件源。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;worker-src&lt;/code&gt;
限制Worker、SharedWorker或者ServiceWorker脚本源。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Pm2介绍及使用</title>
        <link>https://mizarzh.github.io/p/2022/01/pm2%E4%BB%8B%E7%BB%8D%E5%8F%8A%E4%BD%BF%E7%94%A8/</link>
        <pubDate>Tue, 25 Jan 2022 18:22:22 +0800</pubDate>
        
        <guid>https://mizarzh.github.io/p/2022/01/pm2%E4%BB%8B%E7%BB%8D%E5%8F%8A%E4%BD%BF%E7%94%A8/</guid>
        <description>&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;因为某项目使用 nohup 在后台挂机总是莫名其妙就断掉了很生气，因此我当场换成 pm2 帮我管理这些 node 项目。&lt;/p&gt;
&lt;p&gt;pm2 是一个 node 进程管理工具，可以简化很多 node 应用管理的任务，如性能监控、自动重启&lt;/p&gt;
&lt;p&gt;负载均衡等。&lt;/p&gt;
&lt;p&gt;安装 pm2：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;npm install -g pm2
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;核心命令&#34;&gt;核心命令&lt;/h2&gt;
&lt;h3 id=&#34;一些常见操作&#34;&gt;一些常见操作&lt;/h3&gt;
&lt;p&gt;启动、重新加载、重启、关闭、删除：&lt;/p&gt;
&lt;p&gt;可以指定多个 app：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;pm2 start app
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;pm2 reload app
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;pm2 restart app
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;pm2 stop app
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;pm2 delete app
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;app.js&lt;/code&gt; 也可以换成 &lt;code&gt;all&lt;/code&gt; 代表全部，换成 &lt;code&gt;id&lt;/code&gt; 代表这个进程的编号，换成字符串（如&amp;quot;npm run start&amp;quot;）代表执行 bash 命令。&lt;/p&gt;
&lt;p&gt;启动可以给入的参数（&lt;code&gt;start, restart&lt;/code&gt;）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 传入参数&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-- arg1 arg2
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 更新环境（通常前面设置 NODE_ENV 改变）&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;--update-env
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;列出：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;pm2 &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;list&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;ls&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;l&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;status&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 后面加上参数，代表按照……进行排序&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;--sort &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;id&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;pid&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;memory&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;cpu&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;status&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;uptime&lt;span class=&#34;o&#34;&gt;][&lt;/span&gt;:asc&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;desc&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;dashboard：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;pm2 monit
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;显示元信息：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;pm2 show app
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;重置重启次数：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;pm2 reset app
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;pm2 也可以使用文件模式进行配置，因为太长本文不介绍。详情见 &lt;a class=&#34;link&#34; href=&#34;https://pm2.keymetrics.io/docs/usage/application-declaration/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;pm2 configureation file&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;静态文件&#34;&gt;静态文件&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;pm2 serve &amp;lt;path&amp;gt; &amp;lt;port&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以像普通的 app 一样指定参数。&lt;/p&gt;
&lt;p&gt;SPA：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;pm2 serve --spa
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;会自动定位到 &lt;code&gt;index.html&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;基本 auth：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;pm2 serve --basic-auth-username &amp;lt;username&amp;gt; --basic-auth-password &amp;lt;password&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;重启策略&#34;&gt;重启策略&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 在某一个 cron 时间重启&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;--cron-restart&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;0 0 * * *&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;--cron-restart &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 不使用 cron 重启&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 文件改变时重启&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;--watch
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 最大内存重启&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;--max-memory-restart 300M
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 重启延迟&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;--restart-delay&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 不自动重启&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;--no-autorestart
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;--stop-exit-codes &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 指数增长的重启延迟&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;--exp-backoff-restart-delay&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;100&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;记录logs&#34;&gt;记录（logs）&lt;/h2&gt;
&lt;p&gt;默认的记录文件在 &lt;code&gt;$HOME/.pm2/&lt;/code&gt; 文件夹中&lt;/p&gt;
&lt;h3 id=&#34;显示记录&#34;&gt;显示记录&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;❯ pm2 logs -h
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  Usage: logs &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;options&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;id&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;namespace&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# pm2 logs 选项 + app&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  stream logs file. Default stream all logs
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  Options:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# 三种格式&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    --json                json log output
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    --format              formated log output
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    --raw                 raw output
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# 只显示错误或标准输出&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    --err                 only shows error output
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    --out                 only shows standard output
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# 显示 n 行&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    --lines &amp;lt;n&amp;gt;           output the last N lines, instead of the last &lt;span class=&#34;m&#34;&gt;15&lt;/span&gt; by default
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# 增加时间戳&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    --timestamp &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;format&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;  add timestamps &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;default format YYYY-MM-DD-HH:mm:ss&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# 仅打印 logs，不记录&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    --nostream            print logs without lauching the log stream
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# 高光一些值&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    --highlight &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;value&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;   highlights the given value
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    -h, --help            output usage information
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;限制 log 大小，需要使用 &lt;code&gt;pm2-logrotate&lt;/code&gt; 插件：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;pm2 install pm2-logrotate
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;刷新 log：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;pm2 flush &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;app&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;开启-app-时指定的-log-设置&#34;&gt;开启 app 时指定的 log 设置&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-l --log &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;path&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;# 指定输出路径&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-o --output &amp;lt;path&amp;gt;           &lt;span class=&#34;c1&#34;&gt;# 指定标准输出路径&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-e --error &amp;lt;path&amp;gt;            &lt;span class=&#34;c1&#34;&gt;# 指定错误输出路径&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;--time                       &lt;span class=&#34;c1&#34;&gt;# 使用标准时间戳记录&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;--log-date-format &amp;lt;format&amp;gt;   &lt;span class=&#34;c1&#34;&gt;# 自定义时间戳记录&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;--merge-logs                 &lt;span class=&#34;c1&#34;&gt;# 运行多个进程时使用同一个文件记录，不依照 id 区分&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;持续运行&#34;&gt;持续运行&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ pm2 startup
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;PM2&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; You have to run this &lt;span class=&#34;nb&#34;&gt;command&lt;/span&gt; as root. Execute the following command:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      sudo su -c &lt;span class=&#34;s2&#34;&gt;&amp;#34;env PATH=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$PATH&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;:/home/unitech/.nvm/versions/node/v14.3/bin pm2 startup &amp;lt;distribution&amp;gt; -u &amp;lt;user&amp;gt; --hp &amp;lt;home-path&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;复制并执行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo su -c &lt;span class=&#34;s2&#34;&gt;&amp;#34;env PATH=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$PATH&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;:/home/unitech/.nvm/versions/node/v14.3/bin pm2 startup &amp;lt;distribution&amp;gt; -u &amp;lt;user&amp;gt; --hp &amp;lt;home-path&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;就可以了。&lt;/p&gt;
&lt;p&gt;保存 app 列表，在重启时会马上再次运行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;pm2 save
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;回滚？（resurrect），回到 save 时的版本：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;pm2 resurrect 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;取消开启时运行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;pm2 unstartup
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;cluster-集群&#34;&gt;cluster 集群&lt;/h2&gt;
&lt;p&gt;Node.js 的单个实例在单个线程中运行。 为了利用多核系统，用户有时会想要启动 Node.js 进程的集群来处理负载。集群模块可以轻松创建共享服务器端口的子进程。&lt;/p&gt;
&lt;p&gt;pm2 中也可以使用 cluster 集群，传入 &lt;code&gt;-i&lt;/code&gt; 选项：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;pm2 start app.js -i max
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;max&lt;/code&gt; 代表 pm2 会自动探测有多少核的 CPU，并尝试运行最多的进程。&lt;/p&gt;
&lt;h2 id=&#34;部署系统&#34;&gt;部署系统&lt;/h2&gt;
&lt;p&gt;见 &lt;a class=&#34;link&#34; href=&#34;https://pm2.keymetrics.io/docs/usage/deployment/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Deployment System&lt;/a&gt;。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Cron基本用法</title>
        <link>https://mizarzh.github.io/p/2022/01/cron%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</link>
        <pubDate>Mon, 24 Jan 2022 20:00:48 +0800</pubDate>
        
        <guid>https://mizarzh.github.io/p/2022/01/cron%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</guid>
        <description>&lt;h2 id=&#34;1简介&#34;&gt;1、简介&lt;/h2&gt;
&lt;p&gt;cron 是一个能让用户定时执行指令的程序，这些任务被称为 cron jobs。&lt;/p&gt;
&lt;p&gt;cron 是一个守护进程（daemon）。守护进程是一个后台执行非交互指令的进程，一个守护进程总是会等待执行的命令。&lt;/p&gt;
&lt;p&gt;cron 文件是一个文本文件，里面记载了在何时运行的程序。配置文件在 &lt;code&gt;/etc/cron.\*/&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;cron 的最小运行周期是 60s。&lt;/p&gt;
&lt;h2 id=&#34;2使用&#34;&gt;2、使用&lt;/h2&gt;
&lt;p&gt;linux 命令：crontab&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://mizarzh.github.io/p/2022/01/cron%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/image-20220124201758322.png&#34;
	width=&#34;704&#34;
	height=&#34;245&#34;
	srcset=&#34;https://mizarzh.github.io/p/2022/01/cron%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/image-20220124201758322_hu757016c1579b6e9c8107d0004151dd5b_29716_480x0_resize_box_3.png 480w, https://mizarzh.github.io/p/2022/01/cron%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/image-20220124201758322_hu757016c1579b6e9c8107d0004151dd5b_29716_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;crontab命令&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;287&#34;
		data-flex-basis=&#34;689px&#34;
	
&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;-u 指定用户
-e 编辑该用户的 crontab
-l 列出该用户的 crontab
-r 删除该用户的 crontab
-i 删除前询问
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;3cron-结构&#34;&gt;3、Cron 结构&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* * * * * * [*] command
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://mizarzh.github.io/p/2022/01/cron%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/cron-2131.jpg&#34;
	width=&#34;720&#34;
	height=&#34;341&#34;
	srcset=&#34;https://mizarzh.github.io/p/2022/01/cron%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/cron-2131_hu017fa58ad84a7baa4409ee61d2e53480_91695_480x0_resize_q75_box.jpg 480w, https://mizarzh.github.io/p/2022/01/cron%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/cron-2131_hu017fa58ad84a7baa4409ee61d2e53480_91695_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;cron sytax&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;211&#34;
		data-flex-basis=&#34;506px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;在这七个位置的*号分别代表七个不同的时间点，指定的是相应的时间点。最后一个选项年是可以省略的（毕竟没有重复的年）。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;0 0 0 \* \* 5 backup.sh
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;指的就是每周五0点0时0分进行备份。&lt;/p&gt;
&lt;p&gt;在这些*号里面还可以指定其他的符号，以符合相应的匹配。&lt;/p&gt;
&lt;p&gt;其他的符号：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;\* [全体] 代表每次都触发
, [全体] 代表多个时间点触发。如小时 1,5,8 就是 一点、五点、八点
- [全体] 代表一个范围的触发，如 4-7 就是 4,5,6,7
/ [全体] 代表步进，/前面的值代表初始值，后面的值代表隔多久进行触发一次。如1-20/2 天，就是在1-20的范围内每隔2天进行一次。
L [星期、日期] 代表这个月的最后一天或这个月的最后一个星期X，前面可加数字指定是最后第几个。如最后一天 L，最后第二个星期三 3L
W [日期] 指定距离每个月第几天最近的工作日。如 1W 指定的就是距离这个月第一天最近的工作日（如果这个月第一天是周六，那么指定的天数就是3）。
# [星期] 前面的数字代表星期X，第二个数字代表这个月的第几个。例如 1#2 的意思是这个月的第二个星期一
? [星期、日期] 如果明确了{日期}触发，则{星期}无意义，反之也成立。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;特殊命令：&lt;/p&gt;
&lt;p&gt;这些命令可以直接替换掉整行 &lt;code&gt;\* \* \* \* \* \*&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;@hourly 每小时
@daily / @midnight 在每天0点执行命令
@weekly 在周六晚上运行命令
@monthly 在每个月第一天运行命令
@yearly 在每年1月1日午夜运行命令
@reboot 在启动时运行此命令
这些命令要注意时区的问题
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;记忆得很困难？网上有许多生成 cron 执行时间的网站，赶快试试吧~&lt;/p&gt;
&lt;h2 id=&#34;4一些其他的内容&#34;&gt;4、一些其他的内容&lt;/h2&gt;
&lt;p&gt;cron 权限：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;/etc/cron.allow&lt;/strong&gt; 存在，那么就允许其中的用户创建计划表。&lt;strong&gt;/etc/cron.deny&lt;/strong&gt; 存在，就阻止。&lt;/p&gt;
&lt;p&gt;node 中使用 cron：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;npm install cron
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cron&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;node-cron&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;job&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;CronJob&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;s1&#34;&gt;&amp;#39;* * * * * *&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;You will see this message every second&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;s1&#34;&gt;&amp;#39;America/Los_Angeles&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;文档见：&lt;a class=&#34;link&#34; href=&#34;https://github.com/kelektiv/node-cron&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;node-cron&lt;/a&gt;。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Terminal查看远程图片</title>
        <link>https://mizarzh.github.io/p/2021/11/terminal%E6%9F%A5%E7%9C%8B%E8%BF%9C%E7%A8%8B%E5%9B%BE%E7%89%87/</link>
        <pubDate>Sat, 27 Nov 2021 20:24:46 +0800</pubDate>
        
        <guid>https://mizarzh.github.io/p/2021/11/terminal%E6%9F%A5%E7%9C%8B%E8%BF%9C%E7%A8%8B%E5%9B%BE%E7%89%87/</guid>
        <description>&lt;h2 id=&#34;问题描述&#34;&gt;问题描述&lt;/h2&gt;
&lt;p&gt;为了查看远程服务器的图片，通常需要使用 scp 命令将图片传到本地查看，然后就要切换标签、输入特别长的路径 etc 一系列麻烦的东西，因此如果能直接输入查看图片的命令就能自动弹出图片就更好了。&lt;/p&gt;
&lt;h2 id=&#34;原理解决方案&#34;&gt;原理&amp;amp;解决方案&lt;/h2&gt;
&lt;p&gt;通过命令行查看图片的原理是通过 Linux 系统内置的 X11 forwarding 功能传输图片，而平常无法做到的问题是 windows 和 mac 不存在这个东西。解决方法就是在 windows 和 mac 上安装有 X11 forwarding 功能的辅助软件即可。&lt;/p&gt;
&lt;p&gt;解决方法：&lt;/p&gt;
&lt;p&gt;1、确定服务器 Linux 是否开启了 X11 forwarding 功能。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo vi /etc/ssh/sshd_config
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# X11Forwarding Yes 其中的这一行改成这样子&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo service sshd restart
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;2、客户端系统，windows 安装 &lt;a class=&#34;link&#34; href=&#34;https://sourceforge.net/projects/xming/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Xming&lt;/a&gt; ，mac 安装 &lt;a class=&#34;link&#34; href=&#34;https://www.xquartz.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;XQuartz&lt;/a&gt;， Linux 像上面一样打开即可。&lt;/p&gt;
&lt;p&gt;以 windows 为例：&lt;/p&gt;
&lt;p&gt;安装后打开 XLaunch，配置如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://mizarzh.github.io/p/2021/11/terminal%E6%9F%A5%E7%9C%8B%E8%BF%9C%E7%A8%8B%E5%9B%BE%E7%89%87/image-20211127211655852.png&#34;
	width=&#34;635&#34;
	height=&#34;481&#34;
	srcset=&#34;https://mizarzh.github.io/p/2021/11/terminal%E6%9F%A5%E7%9C%8B%E8%BF%9C%E7%A8%8B%E5%9B%BE%E7%89%87/image-20211127211655852_hub239f86ea83e0bc489f7783ba7e585be_76204_480x0_resize_box_3.png 480w, https://mizarzh.github.io/p/2021/11/terminal%E6%9F%A5%E7%9C%8B%E8%BF%9C%E7%A8%8B%E5%9B%BE%E7%89%87/image-20211127211655852_hub239f86ea83e0bc489f7783ba7e585be_76204_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;第一页配置&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;132&#34;
		data-flex-basis=&#34;316px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://mizarzh.github.io/p/2021/11/terminal%E6%9F%A5%E7%9C%8B%E8%BF%9C%E7%A8%8B%E5%9B%BE%E7%89%87/image-20211127211814274.png&#34;
	width=&#34;635&#34;
	height=&#34;481&#34;
	srcset=&#34;https://mizarzh.github.io/p/2021/11/terminal%E6%9F%A5%E7%9C%8B%E8%BF%9C%E7%A8%8B%E5%9B%BE%E7%89%87/image-20211127211814274_huca90b04983ecad01d314ccabd072df73_56348_480x0_resize_box_3.png 480w, https://mizarzh.github.io/p/2021/11/terminal%E6%9F%A5%E7%9C%8B%E8%BF%9C%E7%A8%8B%E5%9B%BE%E7%89%87/image-20211127211814274_huca90b04983ecad01d314ccabd072df73_56348_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;第三页配置&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;132&#34;
		data-flex-basis=&#34;316px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;（记得勾上 No Access Control）&lt;/p&gt;
&lt;p&gt;并确保其在右下角后台运行。&lt;/p&gt;
&lt;p&gt;3、ssh 连接时开启 X11 连接。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ssh -Y xxx@xxx.xxx
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接下来使用任何带 GUI 功能都会弹出一个窗口了。&lt;/p&gt;
&lt;p&gt;4、测试：使用&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo apt install x11-apps
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;xclock
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;xeyes
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果不出问题，输入测试样例之后就能弹出图形化窗口。&lt;/p&gt;
&lt;h2 id=&#34;x11介绍&#34;&gt;X11介绍&lt;/h2&gt;
&lt;h3 id=&#34;x&#34;&gt;X&lt;/h3&gt;
&lt;p&gt;X 就是 X WIndows System，是为 Linux 系统提供 GUI 功能（Linux 内核是没有 GUI 的）。&lt;/p&gt;
&lt;h3 id=&#34;x11&#34;&gt;X11&lt;/h3&gt;
&lt;p&gt;X11 就是第十一个版本。这个版本在1987年就已经是第11版了。&lt;/p&gt;
&lt;h3 id=&#34;x-client--server&#34;&gt;X Client &amp;amp; Server&lt;/h3&gt;
&lt;p&gt;X11 协议的客户端和服务端。Client 主要是告知 Server 要绘制什么。Server 的功能主要是管理主机的硬件设备。&lt;/p&gt;
&lt;h2 id=&#34;python-的问题&#34;&gt;python 的问题&lt;/h2&gt;
&lt;p&gt;当然，找到这么一个解决方案，那当然是要试试 python 画图啦，但是却有错误（python 未配置 tkinter）。&lt;/p&gt;
&lt;p&gt;原因是需要设置 matplotlib 的画图环境：&lt;/p&gt;
&lt;p&gt;合法的画图环境：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ValueError: &amp;#39;&amp;#39; is not a valid value for backend; supported values are [&amp;#39;GTK3Agg&amp;#39;, &amp;#39;GTK3Cairo&amp;#39;, &amp;#39;MacOSX&amp;#39;, &amp;#39;nbAgg&amp;#39;, &amp;#39;Qt4Agg&amp;#39;, &amp;#39;Qt4Cairo&amp;#39;, &amp;#39;Qt5Agg&amp;#39;, &amp;#39;Qt5Cairo&amp;#39;, &amp;#39;TkAgg&amp;#39;, &amp;#39;TkCairo&amp;#39;, &amp;#39;WebAgg&amp;#39;, &amp;#39;WX&amp;#39;, &amp;#39;WXAgg&amp;#39;, &amp;#39;WXCairo&amp;#39;, &amp;#39;agg&amp;#39;, &amp;#39;cairo&amp;#39;, &amp;#39;pdf&amp;#39;, &amp;#39;pgf&amp;#39;, &amp;#39;ps&amp;#39;, &amp;#39;svg&amp;#39;, &amp;#39;template&amp;#39;]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;若要使用 tkinter，需要输入以下命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo apt-get install python3-tk
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;测试代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;matplotlib&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;plt&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;matplotlib&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;use&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;tkinker&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;plt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;plot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;plt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;show&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;测试结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://mizarzh.github.io/p/2021/11/terminal%E6%9F%A5%E7%9C%8B%E8%BF%9C%E7%A8%8B%E5%9B%BE%E7%89%87/image-20211127222951974.png&#34;
	width=&#34;1045&#34;
	height=&#34;771&#34;
	srcset=&#34;https://mizarzh.github.io/p/2021/11/terminal%E6%9F%A5%E7%9C%8B%E8%BF%9C%E7%A8%8B%E5%9B%BE%E7%89%87/image-20211127222951974_hue40bf828d262ac41d9e48593c45e4d07_59124_480x0_resize_box_3.png 480w, https://mizarzh.github.io/p/2021/11/terminal%E6%9F%A5%E7%9C%8B%E8%BF%9C%E7%A8%8B%E5%9B%BE%E7%89%87/image-20211127222951974_hue40bf828d262ac41d9e48593c45e4d07_59124_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;测试结果&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;135&#34;
		data-flex-basis=&#34;325px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;feh命令&#34;&gt;feh命令&lt;/h2&gt;
&lt;p&gt;在 Linux 中查看图片的命令有很多，如 &lt;code&gt;eog, display, gimp&lt;/code&gt; 等等。这里使用 &lt;code&gt;feh&lt;/code&gt; 是因为其有一定的图片编辑能力且轻量级。&lt;/p&gt;
&lt;p&gt;安装及测试：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo apt install feh
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;feh somePicture
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>各类“TeX”</title>
        <link>https://mizarzh.github.io/p/2021/10/%E5%90%84%E7%B1%BBtex/</link>
        <pubDate>Wed, 06 Oct 2021 20:44:39 +0800</pubDate>
        
        <guid>https://mizarzh.github.io/p/2021/10/%E5%90%84%E7%B1%BBtex/</guid>
        <description>&lt;h2 id=&#34;1-tex&#34;&gt;1 TeX&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;TeX&lt;/code&gt;是Donald E. Knuth开发的一个排版系统。用户可以使用&lt;a class=&#34;link&#34; href=&#34;https://www.tug.org/utilities/plain/cseq.html#top-ai&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;一系列的低级控制指令&lt;/a&gt;指导系统排版，同时支持变量、作用域、控制流和函数定义。&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;TeX可执行文件/引擎是一个将源文件渲染成排版后可供阅读的文件的二进制程序。较早期的输出文件为DVI，目前较流行的文件为PDF。以下方括号内代表对应的可执行文件。&lt;/p&gt;
&lt;h2 id=&#34;2-tex宏包tex格式&#34;&gt;2 TeX宏包/TeX格式&lt;/h2&gt;
&lt;p&gt;由于&lt;code&gt;TeX&lt;/code&gt;的使用十分繁杂，因此就发展出了更高级别的宏包方便人们使用。&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Plain TeX [tex]: 最原始的TeX宏包。包含了一些基本的宏命令。&lt;/p&gt;
&lt;p&gt;LaTeX [latex]: 目前版本为LaTeX2e，早先版本为LaTeX2.09。目前最常用的格式。&lt;/p&gt;
&lt;p&gt;ConTeXt [context]&lt;/p&gt;
&lt;p&gt;Texinfo [tex, makeinfo]: 将Texinfo文件转换成HTML、DocBook、Emacs info、XML和文本。配合其他的工具可以转换为DVI或PDF。&lt;/p&gt;
&lt;p&gt;Eplain [eplain]: Plain TeX的拓展。&lt;/p&gt;
&lt;h2 id=&#34;3-改良的tex可执行文件引擎&#34;&gt;3 改良的TeX可执行文件/引擎&lt;/h2&gt;
&lt;p&gt;由于&lt;code&gt;TeX&lt;/code&gt;是一个1970年代的程序，因此并不能适应现在的一些渲染需求。&lt;/p&gt;
&lt;p&gt;pdfTeX [pdftex]: 一个可直接渲染pdf文件的引擎。&lt;/p&gt;
&lt;p&gt;XeTeX [xetex]: 与pdfTeX差不多，但支持UTF-8。&lt;/p&gt;
&lt;p&gt;LuaTeX [luatex]: 使用lua作为脚本语言，可以进行更加方便的编程。&lt;/p&gt;
&lt;p&gt;e-TeX [etex]: 是TeX的一个拓展。&lt;/p&gt;
&lt;p&gt;引擎与渲染格式的配合：&lt;/p&gt;
&lt;p&gt;使用&lt;code&gt;pdftex --fmt=latex&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;为方便使用，就定义了pdflatex这个命令。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://mizarzh.github.io/p/2021/10/%E5%90%84%E7%B1%BBtex/engines-formats.jpg&#34;
	width=&#34;572&#34;
	height=&#34;297&#34;
	srcset=&#34;https://mizarzh.github.io/p/2021/10/%E5%90%84%E7%B1%BBtex/engines-formats_hu6b515538fb6f04867c02081ac0133c12_39964_480x0_resize_q75_box.jpg 480w, https://mizarzh.github.io/p/2021/10/%E5%90%84%E7%B1%BBtex/engines-formats_hu6b515538fb6f04867c02081ac0133c12_39964_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;192&#34;
		data-flex-basis=&#34;462px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;使用不同的方法渲染至pdf的步骤：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://mizarzh.github.io/p/2021/10/%E5%90%84%E7%B1%BBtex/image-20211006214418135.png&#34;
	width=&#34;817&#34;
	height=&#34;359&#34;
	srcset=&#34;https://mizarzh.github.io/p/2021/10/%E5%90%84%E7%B1%BBtex/image-20211006214418135_hue6f962cdf6d8a2984cae356cd5914e46_46259_480x0_resize_box_3.png 480w, https://mizarzh.github.io/p/2021/10/%E5%90%84%E7%B1%BBtex/image-20211006214418135_hue6f962cdf6d8a2984cae356cd5914e46_46259_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20211006214418135&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;227&#34;
		data-flex-basis=&#34;546px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;4-tex发行版&#34;&gt;4 TeX发行版&lt;/h2&gt;
&lt;p&gt;TeX发行版能够提供一套成体系的TeX工具。通常人们说安装TeX是指安装发行版。&lt;/p&gt;
&lt;p&gt;TeX Live: 是 TUG (TeX User Group) 维护和发布的 TeX 系统，可说是“官方”的 TeX 系统。&lt;/p&gt;
&lt;p&gt;MiKTeX: 较为轻量级的一个发行版，初始安装仅包含最基本的宏命令，后续按需安装。&lt;/p&gt;
&lt;p&gt;MacTeX: TeX Live在mac上的替代品。&lt;/p&gt;
&lt;h2 id=&#34;5-编辑器&#34;&gt;5 编辑器&lt;/h2&gt;
&lt;p&gt;vscode、vim、tex studio之类&lt;/p&gt;
&lt;p&gt;用于编辑tex文件，渲染工作由引擎进行。&lt;/p&gt;
&lt;h2 id=&#34;6-ctan&#34;&gt;6 CTAN&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.ctan.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;CTAN&lt;/a&gt;是“Comprehensive TeX Archive Network”的首字缩写，为世界上最主要的TeX资源集散网站，搜集了关于TeX的各种文件与软件等等。&lt;/p&gt;
&lt;h2 id=&#34;7-参考&#34;&gt;7 参考&lt;/h2&gt;
&lt;p&gt;[1] &lt;a class=&#34;link&#34; href=&#34;https://texfaq.org/FAQ-texthings&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://texfaq.org/FAQ-texthings&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[2] &lt;a class=&#34;link&#34; href=&#34;https://www.tug.org/levels.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.tug.org/levels.html&lt;/a&gt; 。通过这里也可以访问tug官网。&lt;/p&gt;
&lt;p&gt;[3]  LaTeX入门 by 刘海洋&lt;/p&gt;
&lt;p&gt;[4]https://liam.page/2018/11/26/introduction-to-TeX-engine-format-and-distribution/ 。更加详细的介绍。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>硬盘/储存介质笔记</title>
        <link>https://mizarzh.github.io/p/2021/09/%E7%A1%AC%E7%9B%98/%E5%82%A8%E5%AD%98%E4%BB%8B%E8%B4%A8%E7%AC%94%E8%AE%B0/</link>
        <pubDate>Mon, 27 Sep 2021 19:44:52 +0800</pubDate>
        
        <guid>https://mizarzh.github.io/p/2021/09/%E7%A1%AC%E7%9B%98/%E5%82%A8%E5%AD%98%E4%BB%8B%E8%B4%A8%E7%AC%94%E8%AE%B0/</guid>
        <description>&lt;h2 id=&#34;0-整体参数&#34;&gt;0 整体参数&lt;/h2&gt;
&lt;p&gt;参数：速度、尺寸、容量/成本、耐用性/寿命&lt;/p&gt;
&lt;h2 id=&#34;1-机械硬盘hard-disk-drive-hdd&#34;&gt;1 机械硬盘（&lt;strong&gt;H&lt;/strong&gt;ard &lt;strong&gt;D&lt;/strong&gt;isk &lt;strong&gt;D&lt;/strong&gt;rive, HDD）&lt;/h2&gt;
&lt;p&gt;大牌：西数，东芝，希捷&lt;/p&gt;
&lt;h3 id=&#34;11-物理结构&#34;&gt;1.1 物理结构&lt;/h3&gt;
&lt;p&gt;使用磁介质储存数据&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://mizarzh.github.io/p/2021/09/%E7%A1%AC%E7%9B%98/%E5%82%A8%E5%AD%98%E4%BB%8B%E8%B4%A8%E7%AC%94%E8%AE%B0/%E6%9C%BA%E6%A2%B0%E7%A1%AC%E7%9B%98%E7%A4%BA%E6%84%8F%E5%9B%BE.jpg&#34;
	width=&#34;1000&#34;
	height=&#34;939&#34;
	srcset=&#34;https://mizarzh.github.io/p/2021/09/%E7%A1%AC%E7%9B%98/%E5%82%A8%E5%AD%98%E4%BB%8B%E8%B4%A8%E7%AC%94%E8%AE%B0/%E6%9C%BA%E6%A2%B0%E7%A1%AC%E7%9B%98%E7%A4%BA%E6%84%8F%E5%9B%BE_hub358d9055f276de625e4ba1d737ffbb4_66183_480x0_resize_q75_box.jpg 480w, https://mizarzh.github.io/p/2021/09/%E7%A1%AC%E7%9B%98/%E5%82%A8%E5%AD%98%E4%BB%8B%E8%B4%A8%E7%AC%94%E8%AE%B0/%E6%9C%BA%E6%A2%B0%E7%A1%AC%E7%9B%98%E7%A4%BA%E6%84%8F%E5%9B%BE_hub358d9055f276de625e4ba1d737ffbb4_66183_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;106&#34;
		data-flex-basis=&#34;255px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;硬盘的物理结构一般由磁头与盘片、电动机、主控芯片与排线等部件组成；当主电动机带动盘片旋转时，副电动机带动一组（&lt;strong&gt;磁头&lt;/strong&gt;）到相对应的盘片上并确定读取正面还是反面的碟面，磁头悬浮在碟面上画出一个与盘片同心的圆形轨道（&lt;strong&gt;磁轨&lt;/strong&gt;或称&lt;strong&gt;柱面&lt;/strong&gt;），这时由磁头的磁感线感应碟面上的磁性与使用硬盘厂商指定的读取时间或数据间隔定位&lt;strong&gt;扇区&lt;/strong&gt;，从而得到该扇区的数据内容；&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;磁道&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当磁盘旋转时，磁头若保持在一个位置上，则每个磁头都会在磁盘表面划出一个圆形轨迹，这些圆形轨迹就叫做磁道（Track）。资料存储手段从LMR进展到PMR这中又有CMR、SMR等技术。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;柱面&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在有多个盘片构成的盘组中，由不同盘片的面，但处于同一半径圆的多个磁道组成的一个圆柱面（Cylinder）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;扇区&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;磁盘上的每个磁道被等分为若干个弧段，这些弧段便是硬盘的扇区（Sector）。硬盘的第一个扇区，叫做引导扇区。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://mizarzh.github.io/p/2021/09/%E7%A1%AC%E7%9B%98/%E5%82%A8%E5%AD%98%E4%BB%8B%E8%B4%A8%E7%AC%94%E8%AE%B0/Cylinder_Head_Sector.png&#34;
	width=&#34;1280&#34;
	height=&#34;1380&#34;
	srcset=&#34;https://mizarzh.github.io/p/2021/09/%E7%A1%AC%E7%9B%98/%E5%82%A8%E5%AD%98%E4%BB%8B%E8%B4%A8%E7%AC%94%E8%AE%B0/Cylinder_Head_Sector_hube9521c806163e1cc92be6508cb8781f_277527_480x0_resize_box_3.png 480w, https://mizarzh.github.io/p/2021/09/%E7%A1%AC%E7%9B%98/%E5%82%A8%E5%AD%98%E4%BB%8B%E8%B4%A8%E7%AC%94%E8%AE%B0/Cylinder_Head_Sector_hube9521c806163e1cc92be6508cb8781f_277527_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;92&#34;
		data-flex-basis=&#34;222px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;磁道（Track），柱面（Cylinder），扇区（Sector），磁头（Heads），盘片（Platters）&lt;/p&gt;
&lt;p&gt;每个盘片都有两面，因此也会相对应每盘片有2个磁头。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://mizarzh.github.io/p/2021/09/%E7%A1%AC%E7%9B%98/%E5%82%A8%E5%AD%98%E4%BB%8B%E8%B4%A8%E7%AC%94%E8%AE%B0/Disk-structure2.png&#34;
	width=&#34;1280&#34;
	height=&#34;1280&#34;
	srcset=&#34;https://mizarzh.github.io/p/2021/09/%E7%A1%AC%E7%9B%98/%E5%82%A8%E5%AD%98%E4%BB%8B%E8%B4%A8%E7%AC%94%E8%AE%B0/Disk-structure2_hud4ed22220db0265417523265ed939845_352265_480x0_resize_box_3.png 480w, https://mizarzh.github.io/p/2021/09/%E7%A1%AC%E7%9B%98/%E5%82%A8%E5%AD%98%E4%BB%8B%E8%B4%A8%E7%AC%94%E8%AE%B0/Disk-structure2_hud4ed22220db0265417523265ed939845_352265_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;100&#34;
		data-flex-basis=&#34;240px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;A：磁道
B：扇面
C：扇区
D：簇（扇区组）&lt;/p&gt;
&lt;h3 id=&#34;12-参数&#34;&gt;1.2 参数&lt;/h3&gt;
&lt;p&gt;**尺寸 **2.5寸（笔记本、移动机械硬盘）和3.5寸（主机）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;转速&lt;/strong&gt; 7200rpm或5400rpm，显然转速越快读取速度越快。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;传输速度&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;5400rpm硬盘平均读写速度大致在60-90MB/s这个区间。&lt;/p&gt;
&lt;p&gt;7200rpm硬盘大致在130-250MB/s区间。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;垂直式（CMR）与叠瓦式（SMR）&lt;/strong&gt;：推荐CMR。SMR建议用作只读盘而不修改。&lt;/p&gt;
&lt;p&gt;将一个磁道拿出来并近似为平面。&lt;/p&gt;
&lt;p&gt;古早的机械硬盘的磁性颗粒是水平排列的（因为写探头的大小问题）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://mizarzh.github.io/p/2021/09/%E7%A1%AC%E7%9B%98/%E5%82%A8%E5%AD%98%E4%BB%8B%E8%B4%A8%E7%AC%94%E8%AE%B0/%E6%B0%B4%E5%B9%B3%E6%8E%92%E5%88%97.jpg&#34;
	width=&#34;720&#34;
	height=&#34;467&#34;
	srcset=&#34;https://mizarzh.github.io/p/2021/09/%E7%A1%AC%E7%9B%98/%E5%82%A8%E5%AD%98%E4%BB%8B%E8%B4%A8%E7%AC%94%E8%AE%B0/%E6%B0%B4%E5%B9%B3%E6%8E%92%E5%88%97_hu51c6a36ce060caaf47924948ccc87f91_53617_480x0_resize_q75_box.jpg 480w, https://mizarzh.github.io/p/2021/09/%E7%A1%AC%E7%9B%98/%E5%82%A8%E5%AD%98%E4%BB%8B%E8%B4%A8%E7%AC%94%E8%AE%B0/%E6%B0%B4%E5%B9%B3%E6%8E%92%E5%88%97_hu51c6a36ce060caaf47924948ccc87f91_53617_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;154&#34;
		data-flex-basis=&#34;370px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;后来，写探头变小了，因此可以将磁性颗粒竖着排放，这种排列方式被称为PMR：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://mizarzh.github.io/p/2021/09/%E7%A1%AC%E7%9B%98/%E5%82%A8%E5%AD%98%E4%BB%8B%E8%B4%A8%E7%AC%94%E8%AE%B0/PMR.jpg&#34;
	width=&#34;720&#34;
	height=&#34;467&#34;
	srcset=&#34;https://mizarzh.github.io/p/2021/09/%E7%A1%AC%E7%9B%98/%E5%82%A8%E5%AD%98%E4%BB%8B%E8%B4%A8%E7%AC%94%E8%AE%B0/PMR_hu51c6a36ce060caaf47924948ccc87f91_53262_480x0_resize_q75_box.jpg 480w, https://mizarzh.github.io/p/2021/09/%E7%A1%AC%E7%9B%98/%E5%82%A8%E5%AD%98%E4%BB%8B%E8%B4%A8%E7%AC%94%E8%AE%B0/PMR_hu51c6a36ce060caaf47924948ccc87f91_53262_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;154&#34;
		data-flex-basis=&#34;370px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;为了提高存储的密度，厂家开发出了更加丧心病狂的SMR（也属于PMR），即将磁性颗粒部分相重叠：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://mizarzh.github.io/p/2021/09/%E7%A1%AC%E7%9B%98/%E5%82%A8%E5%AD%98%E4%BB%8B%E8%B4%A8%E7%AC%94%E8%AE%B0/SMR.jpg&#34;
	width=&#34;720&#34;
	height=&#34;456&#34;
	srcset=&#34;https://mizarzh.github.io/p/2021/09/%E7%A1%AC%E7%9B%98/%E5%82%A8%E5%AD%98%E4%BB%8B%E8%B4%A8%E7%AC%94%E8%AE%B0/SMR_hu51c6a36ce060caaf47924948ccc87f91_51830_480x0_resize_q75_box.jpg 480w, https://mizarzh.github.io/p/2021/09/%E7%A1%AC%E7%9B%98/%E5%82%A8%E5%AD%98%E4%BB%8B%E8%B4%A8%E7%AC%94%E8%AE%B0/SMR_hu51c6a36ce060caaf47924948ccc87f91_51830_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;157&#34;
		data-flex-basis=&#34;378px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;原来的传统PMR技术就被称为C(conventional)MR。CMR磁道间有间隔，而SMR叠在了一起，因此没有间隔。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://mizarzh.github.io/p/2021/09/%E7%A1%AC%E7%9B%98/%E5%82%A8%E5%AD%98%E4%BB%8B%E8%B4%A8%E7%AC%94%E8%AE%B0/CMR&amp;amp;SMR.png&#34;
	width=&#34;1181&#34;
	height=&#34;525&#34;
	srcset=&#34;https://mizarzh.github.io/p/2021/09/%E7%A1%AC%E7%9B%98/%E5%82%A8%E5%AD%98%E4%BB%8B%E8%B4%A8%E7%AC%94%E8%AE%B0/CMR&amp;amp;SMR_hua986399627c7eed2002216abbafabc23_463582_480x0_resize_box_3.png 480w, https://mizarzh.github.io/p/2021/09/%E7%A1%AC%E7%9B%98/%E5%82%A8%E5%AD%98%E4%BB%8B%E8%B4%A8%E7%AC%94%E8%AE%B0/CMR&amp;amp;SMR_hua986399627c7eed2002216abbafabc23_463582_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;224&#34;
		data-flex-basis=&#34;539px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://mizarzh.github.io/p/2021/09/%E7%A1%AC%E7%9B%98/%E5%82%A8%E5%AD%98%E4%BB%8B%E8%B4%A8%E7%AC%94%E8%AE%B0/CMR&amp;amp;SMR2.jpg&#34;
	width=&#34;474&#34;
	height=&#34;206&#34;
	srcset=&#34;https://mizarzh.github.io/p/2021/09/%E7%A1%AC%E7%9B%98/%E5%82%A8%E5%AD%98%E4%BB%8B%E8%B4%A8%E7%AC%94%E8%AE%B0/CMR&amp;amp;SMR2_hue977e3476c91cce1dc6440e047056260_16957_480x0_resize_q75_box.jpg 480w, https://mizarzh.github.io/p/2021/09/%E7%A1%AC%E7%9B%98/%E5%82%A8%E5%AD%98%E4%BB%8B%E8%B4%A8%E7%AC%94%E8%AE%B0/CMR&amp;amp;SMR2_hue977e3476c91cce1dc6440e047056260_16957_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;230&#34;
		data-flex-basis=&#34;552px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;读取探头比写入探头要小。CMR的读写很好理解，写入和读取不同的磁道完全是相互独立的。而对于SMR来说，后写入的数据会覆盖较前写入的数据的磁道的下半部分，但是由于读取探头较小，因此可以正常读取数据（读取之前写入数据的磁道的上半部分）。但是如果要修改之前写入过的数据，就需要缓存后写入的数据，写入新数据，再一层一层写入后面的数据。这就是为什么SMR的缓存较大且最好写入后就不要再修改的原因。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://mizarzh.github.io/p/2021/09/%E7%A1%AC%E7%9B%98/%E5%82%A8%E5%AD%98%E4%BB%8B%E8%B4%A8%E7%AC%94%E8%AE%B0/write&amp;amp;read.jpg&#34;
	width=&#34;1041&#34;
	height=&#34;781&#34;
	srcset=&#34;https://mizarzh.github.io/p/2021/09/%E7%A1%AC%E7%9B%98/%E5%82%A8%E5%AD%98%E4%BB%8B%E8%B4%A8%E7%AC%94%E8%AE%B0/write&amp;amp;read_hu278f5dd18b4c0aeb91b7b0d4bcca7e98_118820_480x0_resize_q75_box.jpg 480w, https://mizarzh.github.io/p/2021/09/%E7%A1%AC%E7%9B%98/%E5%82%A8%E5%AD%98%E4%BB%8B%E8%B4%A8%E7%AC%94%E8%AE%B0/write&amp;amp;read_hu278f5dd18b4c0aeb91b7b0d4bcca7e98_118820_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;133&#34;
		data-flex-basis=&#34;319px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;空气/氦气&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;目前空气硬盘最多可以容纳 6 片盘片（西部数据  HC330，1.67TB x 6 = 10TB），氦气硬盘依靠氦气的低密度降低磁盘间距和盘片厚度，盘体内最多可以容纳 9 片盘片（2.0TB x  9 =  18TB），同时常常兼具功耗低、噪音小等附带属性，但是因为氦气需要被完全密封在盘体内，硬盘的死法又多了一个氦气漏气的类型。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;接口&lt;/strong&gt; SATA, USB(移动硬盘)&lt;/p&gt;
&lt;h3 id=&#34;13-扇区管理&#34;&gt;1.3 扇区管理&lt;/h3&gt;
&lt;p&gt;MBR GBT&lt;/p&gt;
&lt;p&gt;主引导记录（Master Boot  Record，缩写：MBR），又叫做主引导扇区，是电脑引导后访问硬盘时所必须要读取的首个扇区，主引导扇区记录着硬盘本身的相关消息以及硬盘各个分割的大小及位置消息，是资料消息的重要入口。如果它受到破坏，硬盘上的基本数据结构消息将会丢失，需要用繁琐的方式试探性的重建数据结构消息后才可能重新访问原先的资料，对于那些扇区为512位组的磁盘，MBR分割表不支持容量大于2.2TB（2.2×1012字节）的扇区。&lt;/p&gt;
&lt;p&gt;全局唯一标识分区表（GUID Partition Table，GPT）是一个实体硬盘的分区表的结构布局的标准。它是可扩展固件接口（EFI）标准的一部分。GPT分配64bits给逻辑块地址，因而使得最大分区大小为$2^{64}-1$个扇区。对于每个扇区大小为512字节的磁盘，相当于9.4ZB（9,444,732,965,739,290,426,880字节或 18,446,744,073,709,551,615（$2^{64}-1$）个扇区x 512（$2^9$）字节每扇区）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://mizarzh.github.io/p/2021/09/%E7%A1%AC%E7%9B%98/%E5%82%A8%E5%AD%98%E4%BB%8B%E8%B4%A8%E7%AC%94%E8%AE%B0/MBR&amp;amp;GPT.png&#34;
	width=&#34;1126&#34;
	height=&#34;815&#34;
	srcset=&#34;https://mizarzh.github.io/p/2021/09/%E7%A1%AC%E7%9B%98/%E5%82%A8%E5%AD%98%E4%BB%8B%E8%B4%A8%E7%AC%94%E8%AE%B0/MBR&amp;amp;GPT_hu4f9dffefb06c8e3413993cccb7c2507a_26545_480x0_resize_box_3.png 480w, https://mizarzh.github.io/p/2021/09/%E7%A1%AC%E7%9B%98/%E5%82%A8%E5%AD%98%E4%BB%8B%E8%B4%A8%E7%AC%94%E8%AE%B0/MBR&amp;amp;GPT_hu4f9dffefb06c8e3413993cccb7c2507a_26545_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;138&#34;
		data-flex-basis=&#34;331px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;14-历史&#34;&gt;1.4 历史&lt;/h3&gt;
&lt;p&gt;来源链接：https://zhuanlan.zhihu.com/p/74275200&lt;/p&gt;
&lt;p&gt;1973年&lt;strong&gt;Winchester技术&lt;/strong&gt;硬盘，确定了硬盘的基本架构，利用几个同轴涂上磁性材料的金属圆盘和可移动磁头密封在一个盒子里，通过圆盘旋转读出信号的改变。
1979年IBM研发了&lt;strong&gt;薄膜磁头技术&lt;/strong&gt;，进一步减小硬盘体积。
1981年IBM研发了&lt;strong&gt;MR（Magnerto Resistive磁阻）技术&lt;/strong&gt;，将存储密度从200Mbpsi提高了数十倍，为大容量硬盘的诞生奠定了基础。
1991年，经过了10年推出了MR技术3.5英寸的1GB硬盘。&lt;strong&gt;3.5寸也成为了现在计算机硬盘的标准规格。&lt;/strong&gt;
1997年，&lt;strong&gt;GMR巨磁阻效应磁头诞生&lt;/strong&gt;，存储密度比MR技术高了8倍多，但是好景不长也基本达到了瓶颈。
2005年，**垂直写入技术（Perpendicular Recording，PMR）**的大量使用使得在2007年日立推出了第一款突破TB级容量的硬盘。进入1TB时代。（单盘1TB）
2010年后SSD走上舞台。
2012年才有了第一款4TB的硬盘。
受限于机械硬盘的瓶颈，2012-2017年机械硬盘技术发展基本处于停滞状态，价格对于今天而言略降。
2017年推出了叠瓦式磁记录(Shingled Magneting Recording，SMR)技术，允许磁轨互相重叠，像屋顶的瓦片。这种方式使得单盘容量能够达到2TB。&lt;strong&gt;但是SMR硬盘的缺点是比较致命的，对于一些存有数据的磁轨，如果写入，针对的是磁轨的全部宽度，而磁轨的重叠会导致临近的磁轨被重写。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;15-杂项&#34;&gt;1.5 杂项&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;护理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;不要拆开！不要拆开！不要拆开！机械硬盘拆开直接报废。&lt;/p&gt;
&lt;p&gt;SMR硬盘最好不要频繁修改数据。&lt;/p&gt;
&lt;h2 id=&#34;2-固态硬盘solid-state-drivessd&#34;&gt;2 固态硬盘（Solid-state Drive,SSD）&lt;/h2&gt;
&lt;p&gt;牌子有很多&lt;/p&gt;
&lt;p&gt;来源：https://www.zhihu.com/question/355642710/answer/897977012&lt;/p&gt;
&lt;p&gt;第一梯队（自产自销）：&lt;/p&gt;
&lt;p&gt;三星，西数/闪迪，东芝，英特尔/镁光。&lt;/p&gt;
&lt;p&gt;其中三星最贵也最好，西数性价比略高，东芝性能一般，英特尔便宜的真便宜，贵的真™贵。&lt;/p&gt;
&lt;p&gt;第二梯队（原厂颗粒）：&lt;/p&gt;
&lt;p&gt;浦科特，金士顿。&lt;/p&gt;
&lt;p&gt;浦科特近年来都没出几个好的固态，性价比不算高。金士顿用的是买原厂颗粒自己封装的，颗粒稳定性不如第一梯队。&lt;/p&gt;
&lt;p&gt;第三梯队（白片）：&lt;/p&gt;
&lt;p&gt;各种品牌定制，联想，宏碁，影驰，七彩虹等等。这些一般都是拿原厂检测不合格但能用的白片，可靠性一般，性能还行。&lt;/p&gt;
&lt;p&gt;第四梯队（黑片）：&lt;/p&gt;
&lt;p&gt;光威悍将，以及各种便宜到不可思议的固态，多是国产品牌。黑片的可靠性不用多说了吧，说不准哪天突然就boom了。&lt;/p&gt;
&lt;p&gt;以下部分数据来源：https://www.zhihu.com/question/19926569/answer/547791508&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://zh.wikipedia.org/wiki/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://zh.wikipedia.org/wiki/&lt;/a&gt;固态硬盘&lt;/p&gt;
&lt;h3 id=&#34;11-物理结构-1&#34;&gt;1.1 物理结构&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://mizarzh.github.io/p/2021/09/%E7%A1%AC%E7%9B%98/%E5%82%A8%E5%AD%98%E4%BB%8B%E8%B4%A8%E7%AC%94%E8%AE%B0/%E5%9B%BA%E6%80%81%E7%A1%AC%E7%9B%98%E7%A4%BA%E6%84%8F%E5%9B%BE.jpg&#34;
	width=&#34;474&#34;
	height=&#34;519&#34;
	srcset=&#34;https://mizarzh.github.io/p/2021/09/%E7%A1%AC%E7%9B%98/%E5%82%A8%E5%AD%98%E4%BB%8B%E8%B4%A8%E7%AC%94%E8%AE%B0/%E5%9B%BA%E6%80%81%E7%A1%AC%E7%9B%98%E7%A4%BA%E6%84%8F%E5%9B%BE_hud9283caa58a9492f7ddd150ff4709ba6_28567_480x0_resize_q75_box.jpg 480w, https://mizarzh.github.io/p/2021/09/%E7%A1%AC%E7%9B%98/%E5%82%A8%E5%AD%98%E4%BB%8B%E8%B4%A8%E7%AC%94%E8%AE%B0/%E5%9B%BA%E6%80%81%E7%A1%AC%E7%9B%98%E7%A4%BA%E6%84%8F%E5%9B%BE_hud9283caa58a9492f7ddd150ff4709ba6_28567_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;91&#34;
		data-flex-basis=&#34;219px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;用非易失性存储器（主要以闪存中的 NAND Flash）作为永久性存储设备。&lt;/p&gt;
&lt;p&gt;固态硬盘由主控、缓存、闪存（NAND Flash）组成。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;主控&lt;/strong&gt; 主控是SSD非常重要的一部分，相当于电脑的CPU，是决定固态性能优劣的核心。由于技术门槛较高，所以主控品牌比较少，目前头部品牌有马牌（Marvell）、三星、英特尔（Intel），另外还有瑞昱、东芝（铠侠）、慧荣、群联等表现不错。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;闪存&lt;/strong&gt; NAND Flash分为四种：SLC, MLC, TLC, QLC。分别代表一个Cell能存储1bit、2bit、3bit和4bit的数据。能储存的数据量从QLC至SLC依次递增。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://mizarzh.github.io/p/2021/09/%E7%A1%AC%E7%9B%98/%E5%82%A8%E5%AD%98%E4%BB%8B%E8%B4%A8%E7%AC%94%E8%AE%B0/LCs.jpg&#34;
	width=&#34;945&#34;
	height=&#34;472&#34;
	srcset=&#34;https://mizarzh.github.io/p/2021/09/%E7%A1%AC%E7%9B%98/%E5%82%A8%E5%AD%98%E4%BB%8B%E8%B4%A8%E7%AC%94%E8%AE%B0/LCs_hud33d9e2573f15dcfa1e8e756ecdb4eec_146952_480x0_resize_q75_box.jpg 480w, https://mizarzh.github.io/p/2021/09/%E7%A1%AC%E7%9B%98/%E5%82%A8%E5%AD%98%E4%BB%8B%E8%B4%A8%E7%AC%94%E8%AE%B0/LCs_hud33d9e2573f15dcfa1e8e756ecdb4eec_146952_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;200&#34;
		data-flex-basis=&#34;480px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;读取速度SLC依次递减至QLC，价格同理。&lt;/p&gt;
&lt;p&gt;目前主流是TLC，QLC也在逐渐占领市场，SLC和MLC基本只能在高端产品中见到。&lt;/p&gt;
&lt;h3 id=&#34;12-接口外形&#34;&gt;1.2 接口/外形&lt;/h3&gt;
&lt;p&gt;根据物理外形可以分为2.5英寸、M.2和AIC（独立显卡那样的插卡式）三类。&lt;/p&gt;
&lt;p&gt;根据电气标准可以分为SATA和PCIe两类。&lt;/p&gt;
&lt;p&gt;根据数据协议可以分为AHCI和NVMe两类。&lt;/p&gt;
&lt;p&gt;SSD的类型：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://mizarzh.github.io/p/2021/09/%E7%A1%AC%E7%9B%98/%E5%82%A8%E5%AD%98%E4%BB%8B%E8%B4%A8%E7%AC%94%E8%AE%B0/types-of-ssd.jpg&#34;
	width=&#34;1914&#34;
	height=&#34;904&#34;
	srcset=&#34;https://mizarzh.github.io/p/2021/09/%E7%A1%AC%E7%9B%98/%E5%82%A8%E5%AD%98%E4%BB%8B%E8%B4%A8%E7%AC%94%E8%AE%B0/types-of-ssd_hu747b90f63fa85023d9cce345c39ebf64_235556_480x0_resize_q75_box.jpg 480w, https://mizarzh.github.io/p/2021/09/%E7%A1%AC%E7%9B%98/%E5%82%A8%E5%AD%98%E4%BB%8B%E8%B4%A8%E7%AC%94%E8%AE%B0/types-of-ssd_hu747b90f63fa85023d9cce345c39ebf64_235556_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;211&#34;
		data-flex-basis=&#34;508px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;PCIe接口和SATA接口的区别：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://mizarzh.github.io/p/2021/09/%E7%A1%AC%E7%9B%98/%E5%82%A8%E5%AD%98%E4%BB%8B%E8%B4%A8%E7%AC%94%E8%AE%B0/PCIe&amp;amp;SATA.jpg&#34;
	width=&#34;797&#34;
	height=&#34;388&#34;
	srcset=&#34;https://mizarzh.github.io/p/2021/09/%E7%A1%AC%E7%9B%98/%E5%82%A8%E5%AD%98%E4%BB%8B%E8%B4%A8%E7%AC%94%E8%AE%B0/PCIe&amp;amp;SATA_hu3db9dd4b5f7add408d7aa7b41145ef7a_30863_480x0_resize_q75_box.jpg 480w, https://mizarzh.github.io/p/2021/09/%E7%A1%AC%E7%9B%98/%E5%82%A8%E5%AD%98%E4%BB%8B%E8%B4%A8%E7%AC%94%E8%AE%B0/PCIe&amp;amp;SATA_hu3db9dd4b5f7add408d7aa7b41145ef7a_30863_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;205&#34;
		data-flex-basis=&#34;492px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;m.2的长度：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://mizarzh.github.io/p/2021/09/%E7%A1%AC%E7%9B%98/%E5%82%A8%E5%AD%98%E4%BB%8B%E8%B4%A8%E7%AC%94%E8%AE%B0/m2-length.png&#34;
	width=&#34;900&#34;
	height=&#34;547&#34;
	srcset=&#34;https://mizarzh.github.io/p/2021/09/%E7%A1%AC%E7%9B%98/%E5%82%A8%E5%AD%98%E4%BB%8B%E8%B4%A8%E7%AC%94%E8%AE%B0/m2-length_hue7c776496566108261ad66de09997e76_121919_480x0_resize_box_3.png 480w, https://mizarzh.github.io/p/2021/09/%E7%A1%AC%E7%9B%98/%E5%82%A8%E5%AD%98%E4%BB%8B%E8%B4%A8%E7%AC%94%E8%AE%B0/m2-length_hue7c776496566108261ad66de09997e76_121919_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;164&#34;
		data-flex-basis=&#34;394px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PCIe4.0与PCIe3.0&lt;/strong&gt; PCIe 4.0的传输速率定义为16GT/s，比3.0翻番。但PCIe 4.0技术较新，价格昂贵，因此不一定适合需求。&lt;/p&gt;
&lt;h3 id=&#34;13-参数&#34;&gt;1.3 参数&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;成本&lt;/strong&gt; 比机械硬盘昂贵。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;速度&lt;/strong&gt; sata协议的硬盘接口：m.2接口，sata3接口，PCI-E x2接口。速度在500-700MB/SNVME协议的硬盘接口：m.2接口，PCIE-E x4接口。3000MB/S以上。&lt;/p&gt;
&lt;p&gt;与机械硬盘相比，固态硬盘拥有更快的读写速度（无论是顺序读写还是随机读写）、更高的IOPS（每秒响应次数）以及更低的响应延迟（类比机械硬盘的寻道时间）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;寿命&lt;/strong&gt; 由于浮栅MOSFET中本征电场的存在，随着时间流逝产生的电荷泄漏，会逐渐导致NAND闪存中的数据出错甚至无法读取。由于陷阱辅助隧穿（Trap-assisted tunneling (TAT)）效应，随着擦写次数（编程/擦除周期数，Program/Erase Cycle (P/E Cycle)）的增加，氧化物绝缘层逐渐磨损，NAND闪存的可靠性会逐渐降低（数据保持时间缩短）。升高温度也会使数据保持时间缩短。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一些特性&lt;/strong&gt; 由于没有像机械硬盘那样的运动部件，固态硬盘对振动/震动没那么敏感，较为耐摔，运行时发出的噪音几乎不可闻。但是，固态硬盘在发生故障或因误操作删除、覆盖数据时基本无法恢复。&lt;/p&gt;
&lt;h2 id=&#34;u盘&#34;&gt;U盘&lt;/h2&gt;
&lt;p&gt;结构类似固态硬盘。&lt;/p&gt;
&lt;p&gt;同样使用NAND Flash作为储存，同样有主控进行写入。最大差别是便携性、容量和接口。&lt;/p&gt;
&lt;p&gt;各种接口在下篇文章有详解。&lt;/p&gt;
&lt;h2 id=&#34;sdtf卡&#34;&gt;SD/TF卡&lt;/h2&gt;
&lt;p&gt;同样使用NAND作为储存&lt;/p&gt;
&lt;p&gt;链接：https://zhuanlan.zhihu.com/p/66018996&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;外观区分：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;SD卡体积为24mm×32mm×2.1mm；&lt;/p&gt;
&lt;p&gt;TF卡体积为15mm×11mm×1mm！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;名称区分：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;SD卡即Secure Digital Memory Card，中文翻译为安全数码卡。&lt;/p&gt;
&lt;p&gt;TF卡即T-Flash又称MicroSD，是一种记忆卡。后改称为TransFlash；而重新命名为MicroSD的原因是因为被SD协会（SDA）采立。另一些被SDA采立的记忆卡包括miniSD和SD卡。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;用途区分：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;SD卡被广泛地于便携式装置上使用，例如数码相机、个人数码助理(PDA)和多媒体播放器等。&lt;/p&gt;
&lt;p&gt;TF卡主要于手机使用，但因它拥有体积极小的优点，随着不断提升的容量，它慢慢开始于GPS设备、便携式音乐播放器和一些快闪存储器盘中使用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SD卡级别：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://mizarzh.github.io/p/2021/09/%E7%A1%AC%E7%9B%98/%E5%82%A8%E5%AD%98%E4%BB%8B%E8%B4%A8%E7%AC%94%E8%AE%B0/SD-types.jpg&#34;
	width=&#34;940&#34;
	height=&#34;958&#34;
	srcset=&#34;https://mizarzh.github.io/p/2021/09/%E7%A1%AC%E7%9B%98/%E5%82%A8%E5%AD%98%E4%BB%8B%E8%B4%A8%E7%AC%94%E8%AE%B0/SD-types_huf4ff032de6a02a6de978b855227d9993_116558_480x0_resize_q75_box.jpg 480w, https://mizarzh.github.io/p/2021/09/%E7%A1%AC%E7%9B%98/%E5%82%A8%E5%AD%98%E4%BB%8B%E8%B4%A8%E7%AC%94%E8%AE%B0/SD-types_huf4ff032de6a02a6de978b855227d9993_116558_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;98&#34;
		data-flex-basis=&#34;235px&#34;
	
&gt;&lt;/p&gt;</description>
        </item>
        <item>
        <title>Regexp相关</title>
        <link>https://mizarzh.github.io/p/2020/02/regexp%E7%9B%B8%E5%85%B3/</link>
        <pubDate>Wed, 05 Feb 2020 00:57:40 +0800</pubDate>
        
        <guid>https://mizarzh.github.io/p/2020/02/regexp%E7%9B%B8%E5%85%B3/</guid>
        <description>&lt;h1 id=&#34;正则表达式的表示方法&#34;&gt;正则表达式的表示方法&lt;/h1&gt;
&lt;p&gt;来自：&lt;a class=&#34;link&#34; href=&#34;http://www.regexlab.com/zh/regref.htm&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;regexlab&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;1直接写内容&#34;&gt;1、直接写内容&lt;/h2&gt;
&lt;p&gt;直接匹配内容&lt;/p&gt;
&lt;h2 id=&#34;2转义字符&#34;&gt;2、转义字符&lt;/h2&gt;
&lt;h3 id=&#34;1&#34;&gt;1&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;字符&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;\n \r&lt;/td&gt;
&lt;td&gt;换行符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\t&lt;/td&gt;
&lt;td&gt;制表符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\\&lt;/td&gt;
&lt;td&gt;\的字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\$&lt;/td&gt;
&lt;td&gt;$的字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\^&lt;/td&gt;
&lt;td&gt;^的字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\.&lt;/td&gt;
&lt;td&gt;.的字符&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h3 id=&#34;2&#34;&gt;2&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;字符&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;\d&lt;/td&gt;
&lt;td&gt;任意数字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\w&lt;/td&gt;
&lt;td&gt;任意数字、字母及下划线_&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\s&lt;/td&gt;
&lt;td&gt;空白或制表符或换页符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;任意字符（除换行符）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;3方括号&#34;&gt;3、方括号&lt;/h2&gt;
&lt;p&gt;使用方括号 [ ] 包含一系列字符，能够匹配其中任意一个字符。用 [^ ] 包含一系列字符，则能够匹配其中字符之外的任意一个字符。
如：[abc] (a,b,c中任意一个)、[^ f-k] (不是f-k的任意一个字母)、[A-F0-9] (A-F和0-9中任意一个)&lt;/p&gt;
&lt;h2 id=&#34;4数量匹配&#34;&gt;4、数量匹配&lt;/h2&gt;
&lt;p&gt;{n}重复n次
{m,n}重复至少m次至多n次
{m,}至少重复m次
? 相当于 {0,1}
+ 相当于 {1,}
* 相当于 {0,}&lt;/p&gt;
&lt;h2 id=&#34;5位置匹配&#34;&gt;5、位置匹配？&lt;/h2&gt;
&lt;p&gt;^ 与字符串开始的地方匹配，不匹配任何字符（若匹配到的字符不是开始则错误）
$ 与字符串结束的地方匹配，不匹配任何字符
\b 匹配一个单词边界，也就是单词和空格之间的位置，不匹配任何字符&lt;/p&gt;
&lt;h2 id=&#34;6其他&#34;&gt;6、其他&lt;/h2&gt;
&lt;p&gt;|  	左右两边表达式之间 &amp;ldquo;或&amp;rdquo; 关系，匹配左边或者右边
( )
(1). 在被修饰匹配次数的时候，括号中的表达式可以作为整体被修饰
(2). 取匹配结果的时候，括号中的表达式匹配到的内容可以被单独得到&lt;/p&gt;
&lt;h2 id=&#34;7高级技巧&#34;&gt;7、高级技巧&lt;/h2&gt;
&lt;h3 id=&#34;贪婪与非贪婪&#34;&gt;贪婪与非贪婪&lt;/h3&gt;
&lt;p&gt;默认是贪婪（匹配得越多越好）
在数量符号后面加上?（如w+?）则为非贪婪模式，匹配越少越好&lt;/p&gt;
&lt;h3 id=&#34;引用&#34;&gt;引用&lt;/h3&gt;
&lt;p&gt;\1、\2等符号获取在( )中匹配的字符&lt;/p&gt;
&lt;h3 id=&#34;预搜索不匹配反向预搜索不匹配&#34;&gt;预搜索，不匹配；反向预搜索，不匹配&lt;/h3&gt;
&lt;p&gt;(?=xxxx)&lt;/p&gt;
&lt;h2 id=&#34;8其他&#34;&gt;8、其他&lt;/h2&gt;
&lt;p&gt;\xXX  \uXXXX 表示字符（编码相关？）
\S \D \W \B 代表相反意义（非数字等）&lt;/p&gt;
&lt;h2 id=&#34;注意事项&#34;&gt;注意事项&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;表达式不要匹配空字符串。否则会一直得到匹配成功，而结果什么都没有匹配到。&lt;/li&gt;
&lt;li&gt;能匹配空字符串的子匹配不要循环无限次。如果括号内的子表达式中的每一部分都可以匹配 0 次，而这个括号整体又可以匹配无限次，那么情况可能比上一条所说的更严重，匹配过程中可能死循环。&lt;/li&gt;
&lt;li&gt;需注意贪婪与非贪婪模式&lt;/li&gt;
&lt;li&gt;或 &amp;ldquo;|&amp;rdquo; 的左右两边，对某个字符最好只有一边可以匹配，这样，不会因为 &amp;ldquo;|&amp;rdquo; 两边的表达式因为交换位置而有所不同。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;js里面的正则表达式形式&#34;&gt;js里面的正则表达式形式：&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;exp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sr&#34;&gt;/ pattern /&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;flags&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//字面量类型
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;exp2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;RegExp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;[bc]at&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;i&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//构造函数
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;模式（pattern）为表达式。
flags:
g表示全局（global）模式，即模式将被应用于所有字符串，而非在发现第一个匹配项时立即停止；
i：表示不区分大小写（case-insensitive）模式，即在确定匹配项时忽略模式与字符串的大小写
m：表示多行（multiline）模式，即在到达一行文本末尾时还会继续查找下一行中是否存在与模式匹配的项。
传入构造函数的字符串需双重转义
如匹配\：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;字符串&lt;/th&gt;
&lt;th&gt;字面量&lt;/th&gt;
&lt;th&gt;匹配&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;\\\\|\\|\&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;（嗯其实这里打的markdown已经是四重转义了）&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;实例的属性&#34;&gt;实例的属性&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;global：布尔值，表示是否设置了 g 标志。&lt;/li&gt;
&lt;li&gt;ignoreCase：布尔值，表示是否设置了 i 标志。&lt;/li&gt;
&lt;li&gt;lastIndex：整数，表示开始搜索下一个匹配项的字符位置，从0算起。&lt;/li&gt;
&lt;li&gt;multiline：布尔值，表示是否设置了 m 标志。&lt;/li&gt;
&lt;li&gt;source：正则表达式的字符串表示，按照字面量形式而非传入构造函数中的字符串模式返回。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;实例的方法&#34;&gt;实例的方法&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;exec()&lt;/strong&gt;：接受一个参数，即要应用模式的字符串，然后返回包含第一个匹配项信息的数组；或者在没有匹配项的情况下返回 null。&lt;/p&gt;
&lt;p&gt;返回的数组虽然是 Array 的实例，但包含两个额外的属性：index 和 input。其中，index表示匹配项在字符串中的位置，而 input 表示应用正则表达式的字符串。&lt;/p&gt;
&lt;p&gt;在数组中，第一项是与整个模式匹配 的字符串，其他项是与模式中的捕获组匹配的字符串（如果模式中没有捕获组，则该数组只包含一项）。&lt;/p&gt;
&lt;p&gt;对于exec()方法而言，即使在模式中设置了全局标志（g），它每次也只会返回一个匹配项。在不设置全局标志的情况下，在同一个字符串上多次调用exec()将始终返回第一个匹配项的信息。而在设置全局标志的情况下，每次调用exec()则都会在字符串中继续查找新匹配项，常与for函数一起使用用于找出所有匹配项。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;test()&lt;/strong&gt;:它接受一个字符串参数。在模式与该参数匹配的情况下返回 true；否则，返回 false。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;toLocaleString()和toString()&lt;/strong&gt; 方法都会返回正则表达式的字面量。
valueOf()方法返回正则表达式本身。&lt;/p&gt;
&lt;h2 id=&#34;regexp构造函数属性&#34;&gt;RegExp构造函数属性&lt;/h2&gt;
&lt;h1 id=&#34;原理nfa&#34;&gt;原理（NFA）&lt;/h1&gt;
</description>
        </item>
        <item>
        <title>hexo win10配置方法，并使用github作为博客地址</title>
        <link>https://mizarzh.github.io/p/2020/01/hexo-win10%E9%85%8D%E7%BD%AE%E6%96%B9%E6%B3%95%E5%B9%B6%E4%BD%BF%E7%94%A8github%E4%BD%9C%E4%B8%BA%E5%8D%9A%E5%AE%A2%E5%9C%B0%E5%9D%80/</link>
        <pubDate>Mon, 27 Jan 2020 22:46:41 +0800</pubDate>
        
        <guid>https://mizarzh.github.io/p/2020/01/hexo-win10%E9%85%8D%E7%BD%AE%E6%96%B9%E6%B3%95%E5%B9%B6%E4%BD%BF%E7%94%A8github%E4%BD%9C%E4%B8%BA%E5%8D%9A%E5%AE%A2%E5%9C%B0%E5%9D%80/</guid>
        <description>&lt;h2 id=&#34;0准备&#34;&gt;0、准备：&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://nodejs.org/en/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;node.js&lt;/a&gt;官网下载node并安装&lt;/li&gt;
&lt;li&gt;安装&lt;a class=&#34;link&#34; href=&#34;https://git-scm.com/download/win&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;git for windows&lt;/a&gt;，以后将使用git bash作为命令行操4作
配置git账号信息：
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git config --global user.name &lt;span class=&#34;s2&#34;&gt;&amp;#34;Firstname Lastname&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git config --global user.email &lt;span class=&#34;s2&#34;&gt;&amp;#34;your-email@youremail.com&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;github新建repository的地址需命名为&lt;em&gt;your-github-name.github.io&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;1使用cnpm&#34;&gt;1、使用cnpm&lt;/h2&gt;
&lt;p&gt;npm命令在国内较慢，需要安装cnpm(淘宝镜像)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;npm install -g cnpm --registry&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;https://registry.npm.taobao.org
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;2安装hexo&#34;&gt;2、安装hexo&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cnpm install -g hexo-cli
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;3新建文件夹&#34;&gt;3、新建文件夹&lt;/h2&gt;
&lt;p&gt;新建一个文件夹，里面将存储blog所需文件&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mkdir my_blog
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; my_blog
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;4初始化hexo&#34;&gt;4、初始化hexo&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;hexo init
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;5安装hexo部署至github的工具&#34;&gt;5、安装hexo部署至github的工具&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cnpm install --save hexo-deployer-git
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;（若出现ERROR Deployer not found: git错误，则是这个工具未安装）&lt;/p&gt;
&lt;h2 id=&#34;6其他配置&#34;&gt;6、其他配置&lt;/h2&gt;
&lt;p&gt;其中文件_config.yml是配置文件
部署到github上需要配置deploy部分&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-makefile&#34; data-lang=&#34;makefile&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &amp;#39;&lt;span class=&#34;n&#34;&gt;git&lt;/span&gt;&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;添加两行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-makefile&#34; data-lang=&#34;makefile&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;repo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_path&lt;/span&gt;-&lt;span class=&#34;n&#34;&gt;to&lt;/span&gt;-&lt;span class=&#34;n&#34;&gt;github&lt;/span&gt;-&lt;span class=&#34;n&#34;&gt;blog_&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;branch&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;master&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可在theme中更换主题&lt;/p&gt;
&lt;h3 id=&#34;本地临时服务器&#34;&gt;本地临时服务器：&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;hexo s 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;s 代表 start
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;默认地址为localhost:4000&lt;/p&gt;
&lt;h3 id=&#34;新建文档&#34;&gt;新建文档：&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;hexo n &lt;span class=&#34;s2&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;n 代表 new
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;文档存放在/source/_post/中&lt;/p&gt;
&lt;h3 id=&#34;生成文档&#34;&gt;生成文档：&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;hexo g 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;g 代表 generate
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;部署文档到github上：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;hexo d 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;d 代表 deploy
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;第一次配置可能需要输入github的账号密码
若是git bash内提示账号相关的错误，返回第零步进行账号的配置&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
