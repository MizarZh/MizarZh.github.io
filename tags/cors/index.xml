<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>CORS on MizarZ&#39;s Blog</title>
        <link>https://mizarzh.github.io/tags/cors/</link>
        <description>Recent content in CORS on MizarZ&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <lastBuildDate>Tue, 25 Jan 2022 20:25:37 +0800</lastBuildDate><atom:link href="https://mizarzh.github.io/tags/cors/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>HTTP头的一些知识点（CORS、CSP）</title>
        <link>https://mizarzh.github.io/p/2022/01/http%E5%A4%B4%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86%E7%82%B9corscsp/</link>
        <pubDate>Tue, 25 Jan 2022 20:25:37 +0800</pubDate>
        
        <guid>https://mizarzh.github.io/p/2022/01/http%E5%A4%B4%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86%E7%82%B9corscsp/</guid>
        <description>&lt;h1 id=&#34;跨域问题&#34;&gt;跨域问题&lt;/h1&gt;
&lt;p&gt;整体概述见 &lt;a class=&#34;link&#34; href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;MDN-CORS&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;一个重要的概念是跨源资源共享（CORS），意为除了本服务器以外的其他来源（origin）访问自己的资源。首部字段 &lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt; 用来控制什么域可以访问。&lt;/p&gt;
&lt;p&gt;有时候我们需要检查 CORS 请求是否是真实的。跨源资源共享还通过一种机制来检查服务器是否会允许要发送的真实请求，该机制通过浏览器发起一个到服务器托管的跨源资源的&amp;quot;预检&amp;quot;请求。首部字段如 &lt;code&gt;Access-Control-Max-Age, Access-Control-Allow-Credentials, Access-Control-Allow-Methods, Access-Control-Allow-Headers&lt;/code&gt; 是用于预检请求的。&lt;/p&gt;
&lt;p&gt;对那些可能对服务器数据产生副作用的 HTTP 请求方法，浏览器必须首先使用 &lt;code&gt;OPTIONS&lt;/code&gt; 方法发起一个预检请求（preflight request），从而获知服务端是否允许该跨源请求。服务器确认允许之后，才发起实际的 HTTP 请求。在预检请求的返回中，服务器端也可以通知客户端，是否需要携带身份凭证。身份凭证通常为 &lt;code&gt;Cookie&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;满足所有下述条件&lt;/strong&gt;不会触发 CORS 预检请求：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;1、使用下列方法之一：

    GET
    HEAD
    POST

2、除了被用户代理自动设置的首部字段（例如 Connection，User-Agent）和在 Fetch 规范中定义为 禁用首部名称 的其他首部，允许人为设置的字段为 Fetch 规范定义的 对 CORS 安全的首部字段集合。该集合为：

    Accept
    Accept-Language
    Content-Language
    Content-Type （需要注意额外的限制）

3、Content-Type 的值仅限于下列三者之一：

    text/plain
    multipart/form-data
    application/x-www-form-urlencoded

4、请求中的任意 XMLHttpRequest 对象均没有注册任何事件监听器；XMLHttpRequest 对象可以使用 XMLHttpRequest.upload 属性访问。

5、请求中没有使用 ReadableStream 对象。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;预检请求的过程（以下省略 &lt;code&gt;Access-Control&lt;/code&gt;，因为太长了）：&lt;/p&gt;
&lt;p&gt;OPTIONS 发起（携带 &lt;code&gt;Request-Method&lt;/code&gt; 和 &lt;code&gt;Request-Headers&lt;/code&gt;） -&amp;gt;&lt;/p&gt;
&lt;p&gt;[验证 &lt;code&gt;Allow-Credentials: true&lt;/code&gt; + 身份凭证（通常为 Cookie）-&amp;gt;  ]&lt;/p&gt;
&lt;p&gt;返回 &lt;code&gt;Max-Age&lt;/code&gt; 头表示允许的最长时间， &lt;code&gt;Allow-Methods&lt;/code&gt; 表示允许操作的方法，&lt;code&gt;Allow-Headers&lt;/code&gt; 表示允许的首部字段。或者返回 CORS 错误。&lt;/p&gt;
&lt;h2 id=&#34;响应&#34;&gt;响应&lt;/h2&gt;
&lt;h3 id=&#34;access-control-allow-origin&#34;&gt;Access-Control-Allow-Origin&lt;/h3&gt;
&lt;p&gt;指定了该响应的资源是否被允许与给定的 origin 共享。&lt;/p&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-http&#34; data-lang=&#34;http&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;Access-Control-Allow-Origin: *
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;Access-Control-Allow-Origin: &amp;lt;origin&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;*&lt;/code&gt;：不需要凭证。（即允许所有网站都能访问）&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;origin&amp;gt;&lt;/code&gt;：指定一个可以访问资源的 URI。（指定某些网站能访问）&lt;/p&gt;
&lt;p&gt;为了对不同的域有不同的缓存，我们可以加上 &lt;code&gt;Vary: Origin&lt;/code&gt; 的头。&lt;/p&gt;
&lt;h3 id=&#34;access-control-expose-headers&#34;&gt;Access-Control-Expose-Headers&lt;/h3&gt;
&lt;p&gt;列出了哪些首部可以作为响应的一部分暴露给外部。&lt;/p&gt;
&lt;p&gt;通常有七种简单响应首部：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Cache-Control
Content-Language
Content-Length
Content-Type
Expires
Last-Modified
Pragma
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;设定 &lt;code&gt;Access-Control-Expose-Headers &lt;/code&gt; 可以暴露其中的一部分。&lt;/p&gt;
&lt;h3 id=&#34;access-control-max-age&#34;&gt;Access-Control-Max-Age&lt;/h3&gt;
&lt;p&gt;表示预检请求的返回结果可以被缓存多久（即&lt;code&gt;Access-Control-Allow-Methods, Access-Control-Allow-Headers&lt;/code&gt;）。&lt;/p&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-http&#34; data-lang=&#34;http&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;Access-Control-Max-Age: &amp;lt;delta-seconds&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;浏览器一般有限制的最大值。&lt;/p&gt;
&lt;p&gt;如果值为 &lt;strong&gt;-1&lt;/strong&gt;，表示禁用缓存，则每次请求前都需要使用 OPTIONS 预检请求。&lt;/p&gt;
&lt;h3 id=&#34;access-control-allow-credentials&#34;&gt;Access-Control-Allow-Credentials&lt;/h3&gt;
&lt;p&gt;表示是否可以将对请求的响应暴露给页面。返回true则可以，其他值均不可以。&lt;/p&gt;
&lt;p&gt;Credentials可以是 cookies, authorization headers 或 TLS client certificates。&lt;/p&gt;
&lt;p&gt;与 &lt;code&gt;XMLHttpRequest.withCredentials&lt;/code&gt; 或Fetch API中的 &lt;code&gt;Request()&lt;/code&gt; 构造器中的 credentials 选项结合使用。&lt;/p&gt;
&lt;h3 id=&#34;access-control-allow-methods&#34;&gt;Access-Control-Allow-Methods&lt;/h3&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-http&#34; data-lang=&#34;http&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;Access-Control-Allow-Methods: &amp;lt;method&amp;gt;, &amp;lt;method&amp;gt;, ...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;access-control-allow-headers&#34;&gt;Access-Control-Allow-Headers&lt;/h3&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-http&#34; data-lang=&#34;http&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;Access-Control-Allow-Headers: &amp;lt;field-name&amp;gt;[, &amp;lt;field-name&amp;gt;]*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;Access-Control-Allow-Headers: *
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;请求&#34;&gt;请求&lt;/h2&gt;
&lt;h3 id=&#34;origin&#34;&gt;Origin&lt;/h3&gt;
&lt;p&gt;请求首部字段 &lt;code&gt;Origin&lt;/code&gt; 指示了请求来自于哪个站点。该字段仅指示服务器名称，并不包含任何路径信息。&lt;/p&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-http&#34; data-lang=&#34;http&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;Origin: &amp;#34;&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;Origin: &amp;lt;scheme&amp;gt; &amp;#34;://&amp;#34; &amp;lt;host&amp;gt; [ &amp;#34;:&amp;#34; &amp;lt;port&amp;gt; ]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;access-control-request-method&#34;&gt;Access-Control-Request-Method&lt;/h3&gt;
&lt;p&gt;用于预检请求。其作用是，将实际请求所使用的 HTTP 方法告诉服务器。&lt;/p&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-http&#34; data-lang=&#34;http&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;Access-Control-Allow-Methods: &amp;lt;method&amp;gt;, &amp;lt;method&amp;gt;, ...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;access-control-request-headers&#34;&gt;Access-Control-Request-Headers&lt;/h3&gt;
&lt;p&gt;用于预检请求。其作用是，将实际请求所携带的首部字段告诉服务器。&lt;/p&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-http&#34; data-lang=&#34;http&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;Access-Control-Allow-Headers: &amp;lt;header-name&amp;gt;[, &amp;lt;header-name&amp;gt;]*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;Access-Control-Allow-Headers: *
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;跨域策略&#34;&gt;跨域策略&lt;/h1&gt;
&lt;p&gt;详细资料见 &lt;a class=&#34;link&#34; href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTTP/Cross-Origin_Resource_Policy_%28CORP%29&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;MDN-CORP &lt;/a&gt;和 &lt;a class=&#34;link&#34; href=&#34;https://web.dev/why-coop-coep/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;为何需要“跨源隔离”才能获得强大的功能&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;简介-1&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;CORS 出现后，确实能加载跨域资源了，但是基于 CORS 网络攻击也随之而来。如 Spectre，跨域脚本注入攻击等。因此需要引入另外的策略以确保安全。&lt;/p&gt;
&lt;p&gt;CORP 是默认同源策略上的一层保护。&lt;/p&gt;
&lt;h2 id=&#34;cross-origin-resource-policy-corp&#34;&gt;Cross-Origin-Resource-Policy (CORP)&lt;/h2&gt;
&lt;p&gt;会指示浏览器阻止对指定资源的无源跨域/跨站点请求。&lt;/p&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-http&#34; data-lang=&#34;http&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;Cross-Origin-Resource-Policy: same-site | same-origin | cross-origin
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;cross-origin-opener-policy-coop&#34;&gt;Cross-Origin-Opener-Policy (COOP)&lt;/h2&gt;
&lt;p&gt;允许通过将其他文档放在不同的浏览器上下文组中，确保将其与其他文档隔离开，这样它们就不能直接与顶层窗口进行交互。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-http&#34; data-lang=&#34;http&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;Cross-Origin-Opener-Policy: unsafe-none | same-origin-allow-popups | same-origin
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;unsafe-none&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;​    默认值，允许设置浏览器上下文组，除非 opener 本身的 COOP 为 &lt;code&gt;same-origin&lt;/code&gt; 或 &lt;code&gt;same-origin-allow-popups&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;same-origin-allow-popups&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;​    带有 &lt;code&gt;same-origin-allow-popups&lt;/code&gt; 的顶级文档保留了对未设置 COOP 或通过把 COOP 设置为 &lt;code&gt;unsafe-none&lt;/code&gt; 而选择退出隔离的任何弹出窗口的引用。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://mizarzh.github.io/p/2022/01/http%E5%A4%B4%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86%E7%82%B9corscsp/coop3.png&#34;
	width=&#34;800&#34;
	height=&#34;537&#34;
	srcset=&#34;https://mizarzh.github.io/p/2022/01/http%E5%A4%B4%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86%E7%82%B9corscsp/coop3_hu768711903f085caee47ac7be37afed2b_21514_480x0_resize_box_3.png 480w, https://mizarzh.github.io/p/2022/01/http%E5%A4%B4%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86%E7%82%B9corscsp/coop3_hu768711903f085caee47ac7be37afed2b_21514_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;COOP&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;148&#34;
		data-flex-basis=&#34;357px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;same-origin&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;​    标有 &lt;code&gt;same-origin&lt;/code&gt; 的文档可以与标有 &lt;code&gt;same-origin&lt;/code&gt; 的同源文件共享相同的浏览上下文组。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://mizarzh.github.io/p/2022/01/http%E5%A4%B4%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86%E7%82%B9corscsp/coop2.png&#34;
	width=&#34;800&#34;
	height=&#34;507&#34;
	srcset=&#34;https://mizarzh.github.io/p/2022/01/http%E5%A4%B4%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86%E7%82%B9corscsp/coop2_huf2e1fa64086281a1c8bedc1c47a49ca2_24491_480x0_resize_box_3.png 480w, https://mizarzh.github.io/p/2022/01/http%E5%A4%B4%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86%E7%82%B9corscsp/coop2_huf2e1fa64086281a1c8bedc1c47a49ca2_24491_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;COOP2&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;157&#34;
		data-flex-basis=&#34;378px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;cross-origin-embedder-policy-coep&#34;&gt;Cross-Origin-Embedder-Policy (COEP)&lt;/h2&gt;
&lt;p&gt;可防止文档加载未明确授予文档权限(通过 CORP 或者 CORS)的任何跨域资源 。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://mizarzh.github.io/p/2022/01/http%E5%A4%B4%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86%E7%82%B9corscsp/coep.png&#34;
	width=&#34;800&#34;
	height=&#34;410&#34;
	srcset=&#34;https://mizarzh.github.io/p/2022/01/http%E5%A4%B4%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86%E7%82%B9corscsp/coep_huc0ac7001fa60d37fe55a5bb05ff9b1bc_21404_480x0_resize_box_3.png 480w, https://mizarzh.github.io/p/2022/01/http%E5%A4%B4%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86%E7%82%B9corscsp/coep_huc0ac7001fa60d37fe55a5bb05ff9b1bc_21404_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;COEP 的工作原理&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;195&#34;
		data-flex-basis=&#34;468px&#34;
	
&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-http&#34; data-lang=&#34;http&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;Cross-Origin-Embedder-Policy: unsafe-none | require-corp
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;unsafe-none&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这是默认值. 允许文档获取跨源资源，而无需通过CORS协议或 &lt;code&gt;Cross-Origin-Resource-Policy&lt;/code&gt;头。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;require-corp&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;文档只能从相同的源加载资源，或显式标记为可从另一个源加载的资源。&lt;/p&gt;
&lt;p&gt;如果跨源资源支持CORS，则 &lt;code&gt;crossorigin&lt;/code&gt; 属性或 &lt;code&gt;Cross-Origin-Resource-Policy&lt;/code&gt;头必须使用它来加载资源，而不会被COEP阻止。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;内容安全策略csp&#34;&gt;内容安全策略（CSP）&lt;/h1&gt;
&lt;p&gt;详细介绍见 &lt;a class=&#34;link&#34; href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CSP&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;MDN-CSP&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;是一个额外的安全层，用于检测并削弱某些特定类型的攻击，包括跨站脚本 (XSS) 和数据注入攻击等。&lt;/p&gt;
&lt;h2 id=&#34;content-security-policy&#34;&gt;Content-Security-Policy&lt;/h2&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-http&#34; data-lang=&#34;http&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;Content-Security-Policy: &amp;lt;policy-directive&amp;gt;; &amp;lt;policy-directive&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;格式：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-http&#34; data-lang=&#34;http&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;Content-Security-Policy: default-src &amp;#39;self&amp;#39;; img-src *; media-src media1.com media2.com;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;&#39;self&#39;&lt;/code&gt; 指的是站点的同一个源。&lt;/p&gt;
&lt;p&gt;通常使用的获取指令（fetch directives）：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;child-src&lt;/code&gt;
为 web workers 和其他内嵌浏览器内容（例如用 &lt;code&gt;&amp;lt;frame&amp;gt;&lt;/code&gt; 和 &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; 加载到页面的内容）定义合法的源地址。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;connect-src&lt;/code&gt;
限制能通过脚本接口加载的URL。
&lt;code&gt;default-src&lt;/code&gt;
为其他取指令提供备用服务fetch directives。
&lt;code&gt;font-src&lt;/code&gt;
font-src：设置允许通过@font-face加载的字体源地址。
&lt;code&gt;frame-src&lt;/code&gt;
设置允许通过类似 &lt;code&gt;&amp;lt;frame&amp;gt;&lt;/code&gt; 和 &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; 标签加载的内嵌内容的源地址。
&lt;code&gt;img-src&lt;/code&gt;
限制图片和图标的源地址
&lt;code&gt;manifest-src&lt;/code&gt;
限制应用声明文件的源地址。
&lt;code&gt;media-src&lt;/code&gt;
限制通过 &lt;code&gt;&amp;lt;audio&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; 或 &lt;code&gt;&amp;lt;track&amp;gt;&lt;/code&gt; 标签加载的媒体文件的源地址。
&lt;code&gt;object-src&lt;/code&gt;
限制 &lt;code&gt;&amp;lt;object&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;embed&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;applet&amp;gt;&lt;/code&gt; 标签的源地址。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;prefetch-src&lt;/code&gt;
指定预加载或预渲染的允许源地址。
&lt;code&gt;script-src&lt;/code&gt;
限制 JavaScript 的源地址。
&lt;code&gt;style-src&lt;/code&gt;
限制层叠样式表文件源。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;worker-src&lt;/code&gt;
限制Worker、SharedWorker或者ServiceWorker脚本源。&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
