<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Cache on MizarZ&#39;s Blog</title>
        <link>https://mizarzh.github.io/tags/cache/</link>
        <description>Recent content in Cache on MizarZ&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <lastBuildDate>Tue, 25 Jan 2022 20:25:37 +0800</lastBuildDate><atom:link href="https://mizarzh.github.io/tags/cache/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>HTTP头的一些知识点（Cache）</title>
        <link>https://mizarzh.github.io/p/2022/01/http%E5%A4%B4%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86%E7%82%B9cache/</link>
        <pubDate>Tue, 25 Jan 2022 20:25:37 +0800</pubDate>
        
        <guid>https://mizarzh.github.io/p/2022/01/http%E5%A4%B4%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86%E7%82%B9cache/</guid>
        <description>&lt;h1 id=&#34;缓存&#34;&gt;缓存&lt;/h1&gt;
&lt;h2 id=&#34;概述&#34;&gt;概述&lt;/h2&gt;
&lt;p&gt;整体概述见 &lt;a class=&#34;link&#34; href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Caching&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;MDN-Cache&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;缓存是一种保存资源副本并在下次请求时直接使用该副本的技术。当 web 缓存发现请求的资源已经被存储，它会拦截请求，返回该资源的拷贝，而不会去源服务器重新下载。&lt;/p&gt;
&lt;p&gt;缓存分两种：私有与共享缓存。共享缓存存储的响应能够被多个用户使用。私有缓存只能用于单独用户。&lt;/p&gt;
&lt;p&gt;通常缓存的内容是：GET 请求，永久重定向 301，错误响应 404，不完全的响应 206，一个被定义的 cache 键名的响应。&lt;/p&gt;
&lt;p&gt;判断是否过期的一些方法：&lt;/p&gt;
&lt;p&gt;1、约定时间&lt;/p&gt;
&lt;p&gt;2、在URL后面（通常是文件名后面）会加上版本号。&lt;/p&gt;
&lt;p&gt;3、缓存验证：当缓存的文档过期后，需要进行缓存验证或者重新获取资源。只有在服务器返回强校验器或者弱校验器时才会进行验证。&lt;/p&gt;
&lt;p&gt;Vary 请求头：当缓存服务器收到一个请求，只有当前的请求和原始（缓存）的请求头跟缓存的响应头里的Vary都匹配，才能使用缓存的响应。&lt;/p&gt;
&lt;h2 id=&#34;cache-control&#34;&gt;Cache-Control&lt;/h2&gt;
&lt;p&gt;文档来自 &lt;a class=&#34;link&#34; href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Cache-Control&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;MDN&lt;/a&gt;，规范链接 &lt;a class=&#34;link&#34; href=&#34;https://datatracker.ietf.org/doc/html/rfc7234&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;RFC7234&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;简介&#34;&gt;简介&lt;/h3&gt;
&lt;p&gt;通用消息头字段，被用于在http请求和响应中，通过指定指令来实现缓存机制。&lt;/p&gt;
&lt;p&gt;缓存指令是单向的，这意味着在请求中设置的指令，不一定被包含在响应中。&lt;/p&gt;
&lt;h3 id=&#34;指令&#34;&gt;指令&lt;/h3&gt;
&lt;p&gt;请求指令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-http&#34; data-lang=&#34;http&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;Cache-Control: max-age=&amp;lt;seconds&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;Cache-Control: max-stale[=&amp;lt;seconds&amp;gt;]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;Cache-Control: min-fresh=&amp;lt;seconds&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;Cache-control: no-cache
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;Cache-control: no-store
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;Cache-control: no-transform
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;Cache-control: only-if-cached
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;响应指令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-http&#34; data-lang=&#34;http&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;Cache-control: must-revalidate
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;Cache-control: no-cache
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;Cache-control: no-store
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;Cache-control: no-transform
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;Cache-control: public
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;Cache-control: private
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;Cache-control: proxy-revalidate
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;Cache-Control: max-age=&amp;lt;seconds&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;Cache-control: s-maxage=&amp;lt;seconds&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;拓展指令（不是标准文档的一部分，注意兼容性）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-http&#34; data-lang=&#34;http&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;Cache-control: immutable
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;Cache-control: stale-while-revalidate=&amp;lt;seconds&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;Cache-control: stale-if-error=&amp;lt;seconds&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;详细解释&#34;&gt;详细解释&lt;/h3&gt;
&lt;h4 id=&#34;可缓存性&#34;&gt;可缓存性&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;可以被任何对象缓存（包括发送请求的客户端，代理服务器，等等）。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;private&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;能被单个用户缓存，不能作为共享缓存（即代理服务器不能缓存它）。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;no-cache&lt;/code&gt;：验证缓存&lt;/p&gt;
&lt;p&gt;在发布缓存副本之前，强制要求缓存把请求提交给原始服务器进行验证(协商缓存验证)。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;no-store&lt;/code&gt;：不缓存&lt;/p&gt;
&lt;p&gt;不使用任何缓存。（这个才是真的）&lt;/p&gt;
&lt;h4 id=&#34;到期&#34;&gt;到期&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;max-age=&amp;lt;seconds&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;设置缓存存储的最大周期，超过这个时间缓存被认为过期(单位秒)。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;s-maxage=&amp;lt;seconds&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;覆盖&lt;code&gt;max-age&lt;/code&gt;或者&lt;code&gt;Expires&lt;/code&gt;头，但是仅适用于共享缓存(比如各个代理)，私有缓存会忽略它。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;max-stale[=&amp;lt;seconds&amp;gt;]&lt;/code&gt;：接受旧响应&lt;/p&gt;
&lt;p&gt;表明客户端愿意接收一个已经过期的资源。&lt;/p&gt;
&lt;p&gt;可以设置一个可选的秒数，表示响应不能已经过时超过该给定的时间。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;min-fresh=&amp;lt;seconds&amp;gt;&lt;/code&gt;：指定秒数内保持最新&lt;/p&gt;
&lt;p&gt;表示客户端希望获取一个能在指定的秒数内保持其最新状态的响应。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;stale-while-revalidate=&amp;lt;seconds&amp;gt;&lt;/code&gt; 实验：接受旧响应+验证&lt;/p&gt;
&lt;p&gt;表明客户端愿意接受陈旧的响应，同时在后台异步检查新的响应。&lt;/p&gt;
&lt;p&gt;秒值指示客户愿意接受陈旧响应的时间长度。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;stale-if-error=&amp;lt;seconds&amp;gt;&lt;/code&gt; 实验：检查失败接受旧响应&lt;/p&gt;
&lt;p&gt;表示如果新的检查失败，则客户愿意接受陈旧的响应。&lt;/p&gt;
&lt;p&gt;秒数值表示客户在初始到期后愿意接受陈旧响应的时间。&lt;/p&gt;
&lt;h4 id=&#34;重新验证和重新加载&#34;&gt;重新验证和重新加载&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;must-revalidate&lt;/code&gt;：过期不能使用&lt;/p&gt;
&lt;p&gt;一旦资源过期，在成功向原始服务器验证之前，缓存不能用该资源响应后续请求。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;proxy-revalidate&lt;/code&gt;：过期不能使用 proxy 版&lt;/p&gt;
&lt;p&gt;与 &lt;code&gt;must-revalidate&lt;/code&gt; 作用相同，但它仅适用于共享缓存（例如代理），并被私有缓存忽略。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;immutable&lt;/code&gt; 实验&lt;/p&gt;
&lt;p&gt;表示响应正文不会随时间而改变。资源（如果未过期）在服务器上不发生改变，因此客户端不应发送重新验证请求头（例如&lt;code&gt;If-None-Match&lt;/code&gt;或I&lt;code&gt;f-Modified-Since&lt;/code&gt;）来检查更新，即使用户显式地刷新页面。&lt;/p&gt;
&lt;h4 id=&#34;其他&#34;&gt;其他&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;no-transform&lt;/code&gt;：不能变&lt;/p&gt;
&lt;p&gt;不得对资源进行转换或转变。&lt;code&gt;Content-Encoding&lt;/code&gt;、&lt;code&gt;Content-Range&lt;/code&gt;、&lt;code&gt;Content-Type&lt;/code&gt;等HTTP头不能由代理修改。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;only-if-cached&lt;/code&gt;：只接受缓存&lt;/p&gt;
&lt;p&gt;表明客户端只接受已缓存的响应，并且不要向原始服务器检查是否有更新的拷贝。&lt;/p&gt;
&lt;h3 id=&#34;一些常用的技巧&#34;&gt;一些常用的技巧&lt;/h3&gt;
&lt;p&gt;设置 &lt;code&gt;no-cache&lt;/code&gt; 或 &lt;code&gt;max-age=0, must-revalidate&lt;/code&gt; 表示客户端可以缓存资源，每次使用缓存资源前都必须重新验证其有效性。&lt;/p&gt;
&lt;h2 id=&#34;expires&#34;&gt;Expires&lt;/h2&gt;
&lt;p&gt;包含日期/时间， 即在此时候之后，响应过期。如果设置无效的日期，比如 0, 代表着过去的日期，即该资源已经过期。&lt;/p&gt;
&lt;p&gt;如果在 &lt;code&gt;Cache-Control &lt;/code&gt;响应头设置了 &amp;ldquo;max-age&amp;rdquo; 或者 &amp;ldquo;s-max-age&amp;rdquo; 指令，那么 &lt;code&gt;Expires&lt;/code&gt; 头会被忽略。&lt;/p&gt;
&lt;p&gt;和 max-age 区别：max-age 指定的是时间长度，Expires 指定的是日期&lt;/p&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-http&#34; data-lang=&#34;http&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;Expires: &amp;lt;http-date&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;例子：
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;Expires: Wed, 21 Oct 2015 07:28:00 GMT
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;pragma&#34;&gt;Pragma&lt;/h2&gt;
&lt;p&gt;是一个在 HTTP/1.0 中规定的通用首部，这个首部的效果依赖于不同的实现，所以在“请求-响应”链中可能会有不同的效果。它用来向后兼容只支持 HTTP/1.0 协议的缓存服务器，那时候 HTTP/1.1 协议中的 Cache-Control 还没有出来。（兼容用）&lt;/p&gt;
&lt;h2 id=&#34;etag&#34;&gt;ETag&lt;/h2&gt;
&lt;p&gt;是资源的特定版本的标识符。&lt;/p&gt;
&lt;p&gt;如果内容发生了变化，使用ETag有助于防止资源的同时更新相互覆盖（“空中碰撞”）。如果给定URL中的资源更改，则一定要生成新的Etag值。&lt;/p&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-http&#34; data-lang=&#34;http&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;ETag: W/&amp;#34;&amp;lt;etag_value&amp;gt;&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;ETag: &amp;#34;&amp;lt;etag_value&amp;gt;&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;例子
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;ETag: W/&amp;#34;0815&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;ETag: &amp;#34;33a64df551425fcc55e4d42a148795d9f25f89d4&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;W/&lt;/code&gt; 可选&lt;/p&gt;
&lt;p&gt;表示使用弱验证器。弱验证器很容易生成，但不利于比较。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;quot;&amp;lt;etag_value&amp;gt;&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;实体标签唯一地表示所请求的资源。 它们是位于双引号之间的ASCII字符串（如“675af34563dc-tr34”）。 没有明确指定生成ETag值的方法。 通常，使用内容的散列，最后修改时间戳的哈希值，或简单地使用版本号。&lt;/p&gt;
&lt;p&gt;与 &lt;code&gt;If-Match&lt;/code&gt; 和 &lt;code&gt;If-None_Match&lt;/code&gt; 头部匹配。表示的是是否匹配/是否不匹配。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;If-Match&lt;/code&gt;  代表不相同代表不是最新。&lt;/p&gt;
&lt;p&gt;如果客户端没有 &lt;code&gt;ETag&lt;/code&gt;，显示过期了，客服端旧发送&lt;code&gt;If-None_Match&lt;/code&gt; 。如果匹配就说明 304（未修改）。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-http&#34; data-lang=&#34;http&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;If-Match: &amp;#34;33a64df551425fcc55e4d42a148795d9f25f89d4&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;If-None-Match: &amp;#34;33a64df551425fcc55e4d42a148795d9f25f89d4&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;vary&#34;&gt;Vary&lt;/h2&gt;
&lt;p&gt;它决定了对于未来的一个请求头，应该用一个缓存的回复(response)还是向源服务器请求一个新的回复。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-http&#34; data-lang=&#34;http&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;Vary: *
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;Vary: &amp;lt;header-name&amp;gt;, &amp;lt;header-name&amp;gt;, ...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;*&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;所有的请求都被视为唯一并且非缓存的，使&lt;code&gt;Cache-Control: no-store&lt;/code&gt;来实现则更适用，这样用于说明不存储该对象更加清晰。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;header-name&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;逗号分隔的一系列http头部名称，用于确定缓存是否可用。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-http&#34; data-lang=&#34;http&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;Vary: User-Agent
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这句话是对 UA 头部信息进行判别的。提供给移动端的内容是不同的，可用防止你客户端误使用了用于桌面端的缓存。&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
