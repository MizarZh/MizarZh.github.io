<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>前端 on MizarZ&#39;s Blog</title>
    <link>https://mizarzh.github.io/tags/%E5%89%8D%E7%AB%AF/</link>
    <description>Recent content in 前端 on MizarZ&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 16 Feb 2022 18:37:26 +0800</lastBuildDate><atom:link href="https://mizarzh.github.io/tags/%E5%89%8D%E7%AB%AF/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Svg笔记</title>
      <link>https://mizarzh.github.io/p/2022/02/svg%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Wed, 16 Feb 2022 18:37:26 +0800</pubDate>
      
      <guid>https://mizarzh.github.io/p/2022/02/svg%E7%AC%94%E8%AE%B0/</guid>
      <description>简介 SVG 是一种 XML 语言，可以用来绘制矢量图形。 一些注意的点： SVG的元素和属性必须按标准格式书写，因为XML是区分大小写的（这一点和HTML不同</description>
    </item>
    
    <item>
      <title>Canvas笔记</title>
      <link>https://mizarzh.github.io/p/2022/02/canvas%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Tue, 15 Feb 2022 19:14:10 +0800</pubDate>
      
      <guid>https://mizarzh.github.io/p/2022/02/canvas%E7%AC%94%E8%AE%B0/</guid>
      <description>基本用法 html 写法： &amp;lt;canvas id=&amp;#34;canvas&amp;#34; width=&amp;#34;150&amp;#34; height=&amp;#34;150&amp;#34;&amp;gt;&amp;lt;/canvas&amp;gt; 渲染上下文，可以用来绘制想要的内容。传统意义上说的 canvas 的渲染上下文叫做 2d，而 WebGL 的渲染上下文叫做 webgl let canvas = document.getElementById(&amp;#39;canvas&amp;#39;); let ctx = canvas.getContext(&amp;#39;2d&amp;#39;); 绘制</description>
    </item>
    
    <item>
      <title>前端工程化体验（1）</title>
      <link>https://mizarzh.github.io/p/2022/02/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96%E4%BD%93%E9%AA%8C1/</link>
      <pubDate>Tue, 01 Feb 2022 16:02:01 +0800</pubDate>
      
      <guid>https://mizarzh.github.io/p/2022/02/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96%E4%BD%93%E9%AA%8C1/</guid>
      <description>0 开始 最近想写一个项目，是类似于软件的。但是使用 electron 出师不利（各种模块化问题交织在一起无法处理，对各种新工具也不是很熟悉，debug 艰难……）</description>
    </item>
    
    <item>
      <title>前端下载原始实现</title>
      <link>https://mizarzh.github.io/p/2022/01/%E5%89%8D%E7%AB%AF%E4%B8%8B%E8%BD%BD%E5%8E%9F%E5%A7%8B%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Mon, 24 Jan 2022 22:07:49 +0800</pubDate>
      
      <guid>https://mizarzh.github.io/p/2022/01/%E5%89%8D%E7%AB%AF%E4%B8%8B%E8%BD%BD%E5%8E%9F%E5%A7%8B%E5%AE%9E%E7%8E%B0/</guid>
      <description>如果服务器有公开的路径 调用 window.location 跳到指定的路径。 如果使用二进制传输 服务端： 内部传二进制类型，并设置 HTTP 头： Content-Type: application/octet-stream 前端： 首先要设置 XMLHTTPRequest 的 responseType 为 arrayb</description>
    </item>
    
    <item>
      <title>Date方法</title>
      <link>https://mizarzh.github.io/p/2022/01/date%E6%96%B9%E6%B3%95/</link>
      <pubDate>Thu, 20 Jan 2022 21:25:09 +0800</pubDate>
      
      <guid>https://mizarzh.github.io/p/2022/01/date%E6%96%B9%E6%B3%95/</guid>
      <description>1、概述、构造函数 Date 对象基于 Unix Time Stamp，即从 1970 年 1 月 1 日（UTC）起经过的毫秒数。 构造函数： new Date(); // 返回实例化时刻的日期和时间。 new Date(value); // value 是</description>
    </item>
    
    <item>
      <title>Object方法</title>
      <link>https://mizarzh.github.io/p/2021/11/object%E6%96%B9%E6%B3%95/</link>
      <pubDate>Sat, 13 Nov 2021 18:14:10 +0800</pubDate>
      
      <guid>https://mizarzh.github.io/p/2021/11/object%E6%96%B9%E6%B3%95/</guid>
      <description>通用 1、对于属性描述符的介绍见MDN 属性描述符 构造函数 // 对象初始化器（Object initialiser）或对象字面量（literal） { [</description>
    </item>
    
    <item>
      <title>Array方法</title>
      <link>https://mizarzh.github.io/p/2021/11/array%E6%96%B9%E6%B3%95/</link>
      <pubDate>Wed, 10 Nov 2021 22:10:09 +0800</pubDate>
      
      <guid>https://mizarzh.github.io/p/2021/11/array%E6%96%B9%E6%B3%95/</guid>
      <description>1 通用提示 1、Array#someMethod()的含义是Array.prototype.someMethod()。 2、通常，callbac</description>
    </item>
    
    <item>
      <title>Js原生方法</title>
      <link>https://mizarzh.github.io/p/2021/11/js%E5%8E%9F%E7%94%9F%E6%96%B9%E6%B3%95/</link>
      <pubDate>Wed, 10 Nov 2021 19:49:42 +0800</pubDate>
      
      <guid>https://mizarzh.github.io/p/2021/11/js%E5%8E%9F%E7%94%9F%E6%96%B9%E6%B3%95/</guid>
      <description>本文章是 You Dont Konw JS 类型部分的一个笔记。 原生函数 常用的原生函数有： String() Number() Boolean() Array() Object() Function() RegExp() Date() Error() Symbol()——ES6 中新加入的 实际上，它们就是内建函数</description>
    </item>
    
    <item>
      <title>Js类型</title>
      <link>https://mizarzh.github.io/p/2021/11/js%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Tue, 09 Nov 2021 20:16:46 +0800</pubDate>
      
      <guid>https://mizarzh.github.io/p/2021/11/js%E7%B1%BB%E5%9E%8B/</guid>
      <description>本文章是 You Dont Konw JS 类型部分的一个笔记。 1 js类型 js有七种内置类型： 空值（null） 未定义（undefined） 布尔值（boolean） 数字（</description>
    </item>
    
    <item>
      <title>高级HTML</title>
      <link>https://mizarzh.github.io/p/2021/11/%E9%AB%98%E7%BA%A7html/</link>
      <pubDate>Sat, 06 Nov 2021 20:02:15 +0800</pubDate>
      
      <guid>https://mizarzh.github.io/p/2021/11/%E9%AB%98%E7%BA%A7html/</guid>
      <description>1 &amp;lt;head&amp;gt;中的东西 2 语义化标签 3</description>
    </item>
    
    <item>
      <title>css中background相关属性</title>
      <link>https://mizarzh.github.io/p/2021/11/css%E4%B8%ADbackground%E7%9B%B8%E5%85%B3%E5%B1%9E%E6%80%A7/</link>
      <pubDate>Fri, 05 Nov 2021 19:37:44 +0800</pubDate>
      
      <guid>https://mizarzh.github.io/p/2021/11/css%E4%B8%ADbackground%E7%9B%B8%E5%85%B3%E5%B1%9E%E6%80%A7/</guid>
      <description>background是css属性中经常会遇到的属性，接下来将详解这个属性的各个参数的含义。 intro background 是一个复合属性，由： &amp;lt;attachment&amp;gt; &amp;lt;box&amp;gt; &amp;lt;background-color&amp;gt; &amp;lt;bg-image&amp;gt; &amp;lt;position&amp;gt; &amp;lt;repeat-style&amp;gt; &amp;lt;bg-size&amp;gt; 组成。 后面是</description>
    </item>
    
  </channel>
</rss>
