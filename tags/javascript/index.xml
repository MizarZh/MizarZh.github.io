<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>javascript on MizarZ&#39;s Blog</title>
    <link>https://mizarzh.github.io/tags/javascript/</link>
    <description>Recent content in javascript on MizarZ&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 08 Sep 2021 23:10:32 +0800</lastBuildDate><atom:link href="https://mizarzh.github.io/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>webpack学习</title>
      <link>https://mizarzh.github.io/p/2021/09/webpack%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Wed, 08 Sep 2021 23:10:32 +0800</pubDate>
      
      <guid>https://mizarzh.github.io/p/2021/09/webpack%E5%AD%A6%E4%B9%A0/</guid>
      <description>webpack 学习 介绍 webpack 不用多介绍，一个大名鼎鼎的前端打包工具。 官网上是这么介绍的： 本质上，webpack 是一个现代 JavaScript 应用程序的静态模块打包器(modu</description>
    </item>
    
    <item>
      <title>js的读取文本与跨网页</title>
      <link>https://mizarzh.github.io/p/2020/04/js%E7%9A%84%E8%AF%BB%E5%8F%96%E6%96%87%E6%9C%AC%E4%B8%8E%E8%B7%A8%E7%BD%91%E9%A1%B5/</link>
      <pubDate>Fri, 24 Apr 2020 23:23:20 +0800</pubDate>
      
      <guid>https://mizarzh.github.io/p/2020/04/js%E7%9A%84%E8%AF%BB%E5%8F%96%E6%96%87%E6%9C%AC%E4%B8%8E%E8%B7%A8%E7%BD%91%E9%A1%B5/</guid>
      <description>这两天闲来无事，写了两个和展示文字相关的页面，其中遇到了读取文本与跨网页通信的问题。 文件操作 js中直接读取和处理本地的文件是很困难的（除非n</description>
    </item>
    
    <item>
      <title>最近进展2020-4-2</title>
      <link>https://mizarzh.github.io/p/2020/04/%E6%9C%80%E8%BF%91%E8%BF%9B%E5%B1%952020-4-2/</link>
      <pubDate>Thu, 02 Apr 2020 23:39:38 +0800</pubDate>
      
      <guid>https://mizarzh.github.io/p/2020/04/%E6%9C%80%E8%BF%91%E8%BF%9B%E5%B1%952020-4-2/</guid>
      <description>1、写了一个网页 前端练习 website 2、配置服务器 Jupyter notebook 3、学习爬虫 4、事件相关 某同学的一个网页，写一个js脚本，重复点击四（五）个按钮。 首先找出每个按</description>
    </item>
    
    <item>
      <title>最近进展2020-2-19</title>
      <link>https://mizarzh.github.io/p/2020/02/%E6%9C%80%E8%BF%91%E8%BF%9B%E5%B1%952020-2-19/</link>
      <pubDate>Wed, 19 Feb 2020 12:42:14 +0800</pubDate>
      
      <guid>https://mizarzh.github.io/p/2020/02/%E6%9C%80%E8%BF%91%E8%BF%9B%E5%B1%952020-2-19/</guid>
      <description>推箱子 pushbox 过于羞耻.jpg principle HTML与CSS知识相关 这次使用的是外层创建div并限定长度、窗口居中（margin : auto），内部嵌套floa</description>
    </item>
    
    <item>
      <title>js高设笔记13</title>
      <link>https://mizarzh.github.io/p/2020/02/js%E9%AB%98%E8%AE%BE%E7%AC%94%E8%AE%B013/</link>
      <pubDate>Wed, 12 Feb 2020 18:28:18 +0800</pubDate>
      
      <guid>https://mizarzh.github.io/p/2020/02/js%E9%AB%98%E8%AE%BE%E7%AC%94%E8%AE%B013/</guid>
      <description>13事件 js与HTML之间的交互是通过事件实现的 可以使用侦听器（或处理程序）来预订事件 13.1事件流 13.1.1事件冒泡 即事件开始时由具体的</description>
    </item>
    
    <item>
      <title>js高设笔记10</title>
      <link>https://mizarzh.github.io/p/2020/02/js%E9%AB%98%E8%AE%BE%E7%AC%94%E8%AE%B010/</link>
      <pubDate>Tue, 11 Feb 2020 16:11:37 +0800</pubDate>
      
      <guid>https://mizarzh.github.io/p/2020/02/js%E9%AB%98%E8%AE%BE%E7%AC%94%E8%AE%B010/</guid>
      <description>10 DOM DOM（文档对象模型）是针对 HTML和 XML文档的一个 API 10.1 节点层次 DOM可以将任何 HTML 或 XML文档描绘成一个由多层节点构成的结构。 &amp;lt;html&amp;gt; 文档元</description>
    </item>
    
    <item>
      <title>js高设笔记8</title>
      <link>https://mizarzh.github.io/p/2020/02/js%E9%AB%98%E8%AE%BE%E7%AC%94%E8%AE%B08/</link>
      <pubDate>Mon, 10 Feb 2020 13:24:43 +0800</pubDate>
      
      <guid>https://mizarzh.github.io/p/2020/02/js%E9%AB%98%E8%AE%BE%E7%AC%94%E8%AE%B08/</guid>
      <description>BOM BOM（浏览器对象模型） 8.1 window 对象 BOM的核心对象是 window，它表示浏览器的一个实例。在浏览器中，window 对象有双重角色，它既是通过</description>
    </item>
    
    <item>
      <title>js高设笔记7</title>
      <link>https://mizarzh.github.io/p/2020/02/js%E9%AB%98%E8%AE%BE%E7%AC%94%E8%AE%B07/</link>
      <pubDate>Mon, 10 Feb 2020 12:17:39 +0800</pubDate>
      
      <guid>https://mizarzh.github.io/p/2020/02/js%E9%AB%98%E8%AE%BE%E7%AC%94%E8%AE%B07/</guid>
      <description>7 函数表达式 7.1 递归 使用argument.callee 严格模式下，可使用命名函数表达式来达成相同的结果 var factorial = (function f(num){ if (num &amp;lt;= 1){ return 1; } else { return num * f(num-1); } });</description>
    </item>
    
    <item>
      <title>js高设笔记6</title>
      <link>https://mizarzh.github.io/p/2020/02/js%E9%AB%98%E8%AE%BE%E7%AC%94%E8%AE%B06/</link>
      <pubDate>Fri, 07 Feb 2020 18:14:42 +0800</pubDate>
      
      <guid>https://mizarzh.github.io/p/2020/02/js%E9%AB%98%E8%AE%BE%E7%AC%94%E8%AE%B06/</guid>
      <description>6 面向对象的程序设计 （注意：js中的面向对象实现与C++中不同） 6.1 理解对象 var person = new Object(); person.name = &amp;#34;Nicholas&amp;#34;; person.age = 29; person.job = &amp;#34;Software Engineer&amp;#34;; person.sayName = function(){ alert(this.name); }; var person = { name: &amp;#34;Nicholas&amp;#34;, age: 29, job: &amp;#34;Software Engineer&amp;#34;, sayName: function(){</description>
    </item>
    
    <item>
      <title>js高设笔记5</title>
      <link>https://mizarzh.github.io/p/2020/02/js%E9%AB%98%E8%AE%BE%E7%AC%94%E8%AE%B05/</link>
      <pubDate>Fri, 07 Feb 2020 18:13:27 +0800</pubDate>
      
      <guid>https://mizarzh.github.io/p/2020/02/js%E9%AB%98%E8%AE%BE%E7%AC%94%E8%AE%B05/</guid>
      <description>5 引用类型 引用类型是一种结构。 5.1 Object类型 创造实例的两种方法： 1、new+构造函数 2、对象字面量 var person = new Object(); person.name = &amp;#34;Nicholas&amp;#34;; person.age = 29; var person = { name : &amp;#34;Nicholas&amp;#34;, age</description>
    </item>
    
    <item>
      <title>JSON相关</title>
      <link>https://mizarzh.github.io/p/2020/02/json%E7%9B%B8%E5%85%B3/</link>
      <pubDate>Wed, 05 Feb 2020 00:56:57 +0800</pubDate>
      
      <guid>https://mizarzh.github.io/p/2020/02/json%E7%9B%B8%E5%85%B3/</guid>
      <description>JSON组成 简单值：使用与 JavaScript 相同的语法，可以在 JSON 中表示字符串、数值、布尔值和 null。但 JSON不支持 JavaScript中的特殊值 unde</description>
    </item>
    
    <item>
      <title>js高级设计笔记（第四章）</title>
      <link>https://mizarzh.github.io/p/2020/02/js%E9%AB%98%E7%BA%A7%E8%AE%BE%E8%AE%A1%E7%AC%94%E8%AE%B0%E7%AC%AC%E5%9B%9B%E7%AB%A0/</link>
      <pubDate>Wed, 05 Feb 2020 00:35:24 +0800</pubDate>
      
      <guid>https://mizarzh.github.io/p/2020/02/js%E9%AB%98%E7%BA%A7%E8%AE%BE%E8%AE%A1%E7%AC%94%E8%AE%B0%E7%AC%AC%E5%9B%9B%E7%AB%A0/</guid>
      <description>第四章 4.1 基本类型值指的是简单的数据段，而引用类型值指那些可能由多个值构成的对象。 五种基本数据类型：Undifined,Null,Boolea</description>
    </item>
    
  </channel>
</rss>
